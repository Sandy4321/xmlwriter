// Auto generated documentation strings
//       Module: XmlWrite
// Generated by: pydoc2cppdoc.py
// Generated on: Wed Apr 18 19:46:39 2018
//        Style: defn

const char *DOCSTRING_XmlWrite = R"doc_from_python(Writes XML and XHTML.
)doc_from_python";

const char *DOCSTRING_XmlWrite_Element = R"doc_from_python(Represents an element in a markup stream.
)doc_from_python";

const char *DOCSTRING_XmlWrite_Element___class__ = R"doc_from_python(type(object_or_name, bases, dict)
type(object) -> the object's type
type(name, bases, dict) -> a new type
)doc_from_python";

const char *DOCSTRING_XmlWrite_Element___delattr__ = R"doc_from_python(Implement delattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_Element___dir__ = R"doc_from_python(__dir__() -> list
default dir() implementation
)doc_from_python";

const char *DOCSTRING_XmlWrite_Element___enter__ = R"doc_from_python(Context manager support.

        :returns: ``cpip.plot.SVGWriter.SVGGroup,cpip.plot.SVGWriter.SVGLine,cpip.plot.SVGWriter.SVGRect,cpip.plot.SVGWriter.SVGText,cpip.util.XmlWrite.Element`` -- self
        
)doc_from_python";

const char *DOCSTRING_XmlWrite_Element___eq__ = R"doc_from_python(Return self==value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_Element___exit__ = R"doc_from_python(Context manager support.
        TODO: Should respect RAISE_ON_ERROR here if excType is not None.

        :param excType: Exception type, if raised.

        :param excValue: Exception, if raised.

        :param tb: Traceback, if raised.

        :returns: ``NoneType``
        
)doc_from_python";

const char *DOCSTRING_XmlWrite_Element___format__ = R"doc_from_python(default object formatter
)doc_from_python";

const char *DOCSTRING_XmlWrite_Element___ge__ = R"doc_from_python(Return self>=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_Element___getattribute__ = R"doc_from_python(Return getattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_Element___gt__ = R"doc_from_python(Return self>value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_Element___hash__ = R"doc_from_python(Return hash(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_Element___init__ = R"doc_from_python(Constructor.

        :param theXmlStream: The XML stream.

        :param theElemName: Element name.

        :param theAttrs: Element attributes

        :returns: ``NoneType``
        
)doc_from_python";

const char *DOCSTRING_XmlWrite_Element___init_subclass__ = R"doc_from_python(This method is called when a class is subclassed.

The default implementation does nothing. It may be
overridden to extend subclasses.

)doc_from_python";

const char *DOCSTRING_XmlWrite_Element___le__ = R"doc_from_python(Return self<=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_Element___lt__ = R"doc_from_python(Return self<value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_Element___ne__ = R"doc_from_python(Return self!=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_Element___new__ = R"doc_from_python(Create and return a new object.  See help(type) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_Element___reduce__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_Element___reduce_ex__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_Element___repr__ = R"doc_from_python(Return repr(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_Element___setattr__ = R"doc_from_python(Implement setattr(self, name, value).
)doc_from_python";

const char *DOCSTRING_XmlWrite_Element___sizeof__ = R"doc_from_python(__sizeof__() -> int
size of object in memory, in bytes
)doc_from_python";

const char *DOCSTRING_XmlWrite_Element___str__ = R"doc_from_python(Return str(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_Element___subclasshook__ = R"doc_from_python(Abstract classes can override this to customize issubclass().

This is invoked early on by abc.ABCMeta.__subclasscheck__().
It should return True, False or NotImplemented.  If it returns
NotImplemented, the normal algorithm is used.  Otherwise, it
overrides the normal algorithm (and the outcome is cached).

)doc_from_python";

const char *DOCSTRING_XmlWrite_Element___weakref__ = R"doc_from_python(list of weak references to the object (if defined)
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXml = R"doc_from_python(Exception specialisation for the XML writer.
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXml___cause__ = R"doc_from_python(exception cause
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXml___class__ = R"doc_from_python(type(object_or_name, bases, dict)
type(object) -> the object's type
type(name, bases, dict) -> a new type
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXml___context__ = R"doc_from_python(exception context
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXml___delattr__ = R"doc_from_python(Implement delattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXml___dir__ = R"doc_from_python(__dir__() -> list
default dir() implementation
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXml___eq__ = R"doc_from_python(Return self==value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXml___format__ = R"doc_from_python(default object formatter
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXml___ge__ = R"doc_from_python(Return self>=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXml___getattribute__ = R"doc_from_python(Return getattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXml___gt__ = R"doc_from_python(Return self>value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXml___hash__ = R"doc_from_python(Return hash(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXml___init__ = R"doc_from_python(Initialize self.  See help(type(self)) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXml___init_subclass__ = R"doc_from_python(This method is called when a class is subclassed.

The default implementation does nothing. It may be
overridden to extend subclasses.

)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXml___le__ = R"doc_from_python(Return self<=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXml___lt__ = R"doc_from_python(Return self<value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXml___ne__ = R"doc_from_python(Return self!=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXml___new__ = R"doc_from_python(Create and return a new object.  See help(type) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXml___reduce_ex__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXml___repr__ = R"doc_from_python(Return repr(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXml___setattr__ = R"doc_from_python(Implement setattr(self, name, value).
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXml___sizeof__ = R"doc_from_python(__sizeof__() -> int
size of object in memory, in bytes
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXml___str__ = R"doc_from_python(Return str(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXml___subclasshook__ = R"doc_from_python(Abstract classes can override this to customize issubclass().

This is invoked early on by abc.ABCMeta.__subclasscheck__().
It should return True, False or NotImplemented.  If it returns
NotImplemented, the normal algorithm is used.  Otherwise, it
overrides the normal algorithm (and the outcome is cached).

)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXml___weakref__ = R"doc_from_python(list of weak references to the object (if defined)
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXml_with_traceback = R"doc_from_python(Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXml_with_traceback___call__ = R"doc_from_python(Call self as a function.
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXml_with_traceback___class__ = R"doc_from_python(<attribute '__doc__' of 'method_descriptor' objects>
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXml_with_traceback___delattr__ = R"doc_from_python(Implement delattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXml_with_traceback___dir__ = R"doc_from_python(__dir__() -> list
default dir() implementation
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXml_with_traceback___eq__ = R"doc_from_python(Return self==value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXml_with_traceback___format__ = R"doc_from_python(default object formatter
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXml_with_traceback___ge__ = R"doc_from_python(Return self>=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXml_with_traceback___get__ = R"doc_from_python(Return an attribute of instance, which is of type owner.
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXml_with_traceback___getattribute__ = R"doc_from_python(Return getattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXml_with_traceback___gt__ = R"doc_from_python(Return self>value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXml_with_traceback___hash__ = R"doc_from_python(Return hash(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXml_with_traceback___init__ = R"doc_from_python(Initialize self.  See help(type(self)) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXml_with_traceback___init_subclass__ = R"doc_from_python(This method is called when a class is subclassed.

The default implementation does nothing. It may be
overridden to extend subclasses.

)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXml_with_traceback___le__ = R"doc_from_python(Return self<=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXml_with_traceback___lt__ = R"doc_from_python(Return self<value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXml_with_traceback___ne__ = R"doc_from_python(Return self!=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXml_with_traceback___new__ = R"doc_from_python(Create and return a new object.  See help(type) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXml_with_traceback___objclass__ = R"doc_from_python(Common base class for all exceptions
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXml_with_traceback___reduce_ex__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXml_with_traceback___repr__ = R"doc_from_python(Return repr(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXml_with_traceback___setattr__ = R"doc_from_python(Implement setattr(self, name, value).
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXml_with_traceback___sizeof__ = R"doc_from_python(__sizeof__() -> int
size of object in memory, in bytes
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXml_with_traceback___str__ = R"doc_from_python(Return str(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXml_with_traceback___subclasshook__ = R"doc_from_python(Abstract classes can override this to customize issubclass().

This is invoked early on by abc.ABCMeta.__subclasscheck__().
It should return True, False or NotImplemented.  If it returns
NotImplemented, the normal algorithm is used.  Otherwise, it
overrides the normal algorithm (and the outcome is cached).

)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXmlEndElement = R"doc_from_python(Exception specialisation for end of element.
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXmlEndElement___cause__ = R"doc_from_python(exception cause
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXmlEndElement___class__ = R"doc_from_python(type(object_or_name, bases, dict)
type(object) -> the object's type
type(name, bases, dict) -> a new type
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXmlEndElement___context__ = R"doc_from_python(exception context
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXmlEndElement___delattr__ = R"doc_from_python(Implement delattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXmlEndElement___dir__ = R"doc_from_python(__dir__() -> list
default dir() implementation
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXmlEndElement___eq__ = R"doc_from_python(Return self==value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXmlEndElement___format__ = R"doc_from_python(default object formatter
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXmlEndElement___ge__ = R"doc_from_python(Return self>=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXmlEndElement___getattribute__ = R"doc_from_python(Return getattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXmlEndElement___gt__ = R"doc_from_python(Return self>value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXmlEndElement___hash__ = R"doc_from_python(Return hash(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXmlEndElement___init__ = R"doc_from_python(Initialize self.  See help(type(self)) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXmlEndElement___init_subclass__ = R"doc_from_python(This method is called when a class is subclassed.

The default implementation does nothing. It may be
overridden to extend subclasses.

)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXmlEndElement___le__ = R"doc_from_python(Return self<=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXmlEndElement___lt__ = R"doc_from_python(Return self<value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXmlEndElement___ne__ = R"doc_from_python(Return self!=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXmlEndElement___new__ = R"doc_from_python(Create and return a new object.  See help(type) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXmlEndElement___reduce_ex__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXmlEndElement___repr__ = R"doc_from_python(Return repr(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXmlEndElement___setattr__ = R"doc_from_python(Implement setattr(self, name, value).
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXmlEndElement___sizeof__ = R"doc_from_python(__sizeof__() -> int
size of object in memory, in bytes
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXmlEndElement___str__ = R"doc_from_python(Return str(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXmlEndElement___subclasshook__ = R"doc_from_python(Abstract classes can override this to customize issubclass().

This is invoked early on by abc.ABCMeta.__subclasscheck__().
It should return True, False or NotImplemented.  If it returns
NotImplemented, the normal algorithm is used.  Otherwise, it
overrides the normal algorithm (and the outcome is cached).

)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXmlEndElement___weakref__ = R"doc_from_python(list of weak references to the object (if defined)
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXmlEndElement_with_traceback = R"doc_from_python(Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXmlEndElement_with_traceback___call__ = R"doc_from_python(Call self as a function.
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXmlEndElement_with_traceback___class__ = R"doc_from_python(<attribute '__doc__' of 'method_descriptor' objects>
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXmlEndElement_with_traceback___delattr__ = R"doc_from_python(Implement delattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXmlEndElement_with_traceback___dir__ = R"doc_from_python(__dir__() -> list
default dir() implementation
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXmlEndElement_with_traceback___eq__ = R"doc_from_python(Return self==value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXmlEndElement_with_traceback___format__ = R"doc_from_python(default object formatter
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXmlEndElement_with_traceback___ge__ = R"doc_from_python(Return self>=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXmlEndElement_with_traceback___get__ = R"doc_from_python(Return an attribute of instance, which is of type owner.
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXmlEndElement_with_traceback___getattribute__ = R"doc_from_python(Return getattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXmlEndElement_with_traceback___gt__ = R"doc_from_python(Return self>value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXmlEndElement_with_traceback___hash__ = R"doc_from_python(Return hash(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXmlEndElement_with_traceback___init__ = R"doc_from_python(Initialize self.  See help(type(self)) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXmlEndElement_with_traceback___init_subclass__ = R"doc_from_python(This method is called when a class is subclassed.

The default implementation does nothing. It may be
overridden to extend subclasses.

)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXmlEndElement_with_traceback___le__ = R"doc_from_python(Return self<=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXmlEndElement_with_traceback___lt__ = R"doc_from_python(Return self<value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXmlEndElement_with_traceback___ne__ = R"doc_from_python(Return self!=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXmlEndElement_with_traceback___new__ = R"doc_from_python(Create and return a new object.  See help(type) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXmlEndElement_with_traceback___objclass__ = R"doc_from_python(Common base class for all exceptions
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXmlEndElement_with_traceback___reduce_ex__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXmlEndElement_with_traceback___repr__ = R"doc_from_python(Return repr(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXmlEndElement_with_traceback___setattr__ = R"doc_from_python(Implement setattr(self, name, value).
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXmlEndElement_with_traceback___sizeof__ = R"doc_from_python(__sizeof__() -> int
size of object in memory, in bytes
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXmlEndElement_with_traceback___str__ = R"doc_from_python(Return str(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_ExceptionXmlEndElement_with_traceback___subclasshook__ = R"doc_from_python(Abstract classes can override this to customize issubclass().

This is invoked early on by abc.ABCMeta.__subclasscheck__().
It should return True, False or NotImplemented.  If it returns
NotImplemented, the normal algorithm is used.  Otherwise, it
overrides the normal algorithm (and the outcome is cached).

)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream = R"doc_from_python(Specialisation of an XmlStream to handle XHTML.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream___class__ = R"doc_from_python(type(object_or_name, bases, dict)
type(object) -> the object's type
type(name, bases, dict) -> a new type
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream___delattr__ = R"doc_from_python(Implement delattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream___dir__ = R"doc_from_python(__dir__() -> list
default dir() implementation
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream___enter__ = R"doc_from_python(Context manager support.

        :returns: ``cpip.util.XmlWrite.XhtmlStream`` -- self
        
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream___eq__ = R"doc_from_python(Return self==value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream___exit__ = R"doc_from_python(Context manager support.

        :param excType: Exception type, if raised.

        :param excValue: Exception, if raised.

        :param tb: Traceback, if raised.

        :returns: ``NoneType``
        
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream___format__ = R"doc_from_python(default object formatter
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream___ge__ = R"doc_from_python(Return self>=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream___getattribute__ = R"doc_from_python(Return getattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream___gt__ = R"doc_from_python(Return self>value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream___hash__ = R"doc_from_python(Return hash(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream___init__ = R"doc_from_python(Initialise with an encoding.
        
        :param theEnc: The encoding to be used.

        :param theDtdLocal: Any local DTD as a string.

        :param theId: An integer value to use as an ID string.

        :param mustIndent: Flag, if True the elements will be indented (pretty printed).

        :returns: ``NoneType``
        
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream___init_subclass__ = R"doc_from_python(This method is called when a class is subclassed.

The default implementation does nothing. It may be
overridden to extend subclasses.

)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream___le__ = R"doc_from_python(Return self<=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream___lt__ = R"doc_from_python(Return self<value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream___ne__ = R"doc_from_python(Return self!=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream___new__ = R"doc_from_python(Create and return a new object.  See help(type) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream___reduce__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream___reduce_ex__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream___repr__ = R"doc_from_python(Return repr(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream___setattr__ = R"doc_from_python(Implement setattr(self, name, value).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream___sizeof__ = R"doc_from_python(__sizeof__() -> int
size of object in memory, in bytes
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream___str__ = R"doc_from_python(Return str(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream___subclasshook__ = R"doc_from_python(Abstract classes can override this to customize issubclass().

This is invoked early on by abc.ABCMeta.__subclasscheck__().
It should return True, False or NotImplemented.  If it returns
NotImplemented, the normal algorithm is used.  Otherwise, it
overrides the normal algorithm (and the outcome is cached).

)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream___weakref__ = R"doc_from_python(list of weak references to the object (if defined)
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__closeElemIfOpen = R"doc_from_python(Close the element if open.

        :returns: ``NoneType``
        
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__closeElemIfOpen___call__ = R"doc_from_python(Call self as a function.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__closeElemIfOpen___class__ = R"doc_from_python(function(code, globals[, name[, argdefs[, closure]]])

Create a function object from a code object and a dictionary.
The optional name string overrides the name from the code object.
The optional argdefs tuple specifies the default argument values.
The optional closure tuple supplies the bindings for free variables.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__closeElemIfOpen___code__ = R"doc_from_python(code(argcount, kwonlyargcount, nlocals, stacksize, flags, codestring,
      constants, names, varnames, filename, name, firstlineno,
      lnotab[, freevars[, cellvars]])

Create a code object.  Not for the faint of heart.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__closeElemIfOpen___delattr__ = R"doc_from_python(Implement delattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__closeElemIfOpen___dir__ = R"doc_from_python(__dir__() -> list
default dir() implementation
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__closeElemIfOpen___eq__ = R"doc_from_python(Return self==value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__closeElemIfOpen___format__ = R"doc_from_python(default object formatter
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__closeElemIfOpen___ge__ = R"doc_from_python(Return self>=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__closeElemIfOpen___get__ = R"doc_from_python(Return an attribute of instance, which is of type owner.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__closeElemIfOpen___getattribute__ = R"doc_from_python(Return getattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__closeElemIfOpen___gt__ = R"doc_from_python(Return self>value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__closeElemIfOpen___hash__ = R"doc_from_python(Return hash(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__closeElemIfOpen___init__ = R"doc_from_python(Initialize self.  See help(type(self)) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__closeElemIfOpen___init_subclass__ = R"doc_from_python(This method is called when a class is subclassed.

The default implementation does nothing. It may be
overridden to extend subclasses.

)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__closeElemIfOpen___le__ = R"doc_from_python(Return self<=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__closeElemIfOpen___lt__ = R"doc_from_python(Return self<value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__closeElemIfOpen___ne__ = R"doc_from_python(Return self!=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__closeElemIfOpen___new__ = R"doc_from_python(Create and return a new object.  See help(type) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__closeElemIfOpen___reduce__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__closeElemIfOpen___reduce_ex__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__closeElemIfOpen___repr__ = R"doc_from_python(Return repr(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__closeElemIfOpen___setattr__ = R"doc_from_python(Implement setattr(self, name, value).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__closeElemIfOpen___sizeof__ = R"doc_from_python(__sizeof__() -> int
size of object in memory, in bytes
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__closeElemIfOpen___str__ = R"doc_from_python(Return str(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__closeElemIfOpen___subclasshook__ = R"doc_from_python(Abstract classes can override this to customize issubclass().

This is invoked early on by abc.ABCMeta.__subclasscheck__().
It should return True, False or NotImplemented.  If it returns
NotImplemented, the normal algorithm is used.  Otherwise, it
overrides the normal algorithm (and the outcome is cached).

)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__encode = R"doc_from_python("Apply the XML encoding such as ``'<'`` to ``'&lt;'``

        :param theStr: String to encode.

        :returns: ``str`` -- Encoded string.
        
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__encode___call__ = R"doc_from_python(Call self as a function.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__encode___class__ = R"doc_from_python(function(code, globals[, name[, argdefs[, closure]]])

Create a function object from a code object and a dictionary.
The optional name string overrides the name from the code object.
The optional argdefs tuple specifies the default argument values.
The optional closure tuple supplies the bindings for free variables.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__encode___code__ = R"doc_from_python(code(argcount, kwonlyargcount, nlocals, stacksize, flags, codestring,
      constants, names, varnames, filename, name, firstlineno,
      lnotab[, freevars[, cellvars]])

Create a code object.  Not for the faint of heart.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__encode___delattr__ = R"doc_from_python(Implement delattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__encode___dir__ = R"doc_from_python(__dir__() -> list
default dir() implementation
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__encode___eq__ = R"doc_from_python(Return self==value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__encode___format__ = R"doc_from_python(default object formatter
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__encode___ge__ = R"doc_from_python(Return self>=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__encode___get__ = R"doc_from_python(Return an attribute of instance, which is of type owner.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__encode___getattribute__ = R"doc_from_python(Return getattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__encode___gt__ = R"doc_from_python(Return self>value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__encode___hash__ = R"doc_from_python(Return hash(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__encode___init__ = R"doc_from_python(Initialize self.  See help(type(self)) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__encode___init_subclass__ = R"doc_from_python(This method is called when a class is subclassed.

The default implementation does nothing. It may be
overridden to extend subclasses.

)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__encode___le__ = R"doc_from_python(Return self<=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__encode___lt__ = R"doc_from_python(Return self<value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__encode___ne__ = R"doc_from_python(Return self!=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__encode___new__ = R"doc_from_python(Create and return a new object.  See help(type) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__encode___reduce__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__encode___reduce_ex__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__encode___repr__ = R"doc_from_python(Return repr(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__encode___setattr__ = R"doc_from_python(Implement setattr(self, name, value).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__encode___sizeof__ = R"doc_from_python(__sizeof__() -> int
size of object in memory, in bytes
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__encode___str__ = R"doc_from_python(Return str(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__encode___subclasshook__ = R"doc_from_python(Abstract classes can override this to customize issubclass().

This is invoked early on by abc.ABCMeta.__subclasscheck__().
It should return True, False or NotImplemented.  If it returns
NotImplemented, the normal algorithm is used.  Otherwise, it
overrides the normal algorithm (and the outcome is cached).

)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__flipIndent = R"doc_from_python(Set the value at the tip of the indent stack to the given value.

        :param theBool: Flag for indenting.

        :returns: ``NoneType``
        
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__flipIndent___call__ = R"doc_from_python(Call self as a function.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__flipIndent___class__ = R"doc_from_python(function(code, globals[, name[, argdefs[, closure]]])

Create a function object from a code object and a dictionary.
The optional name string overrides the name from the code object.
The optional argdefs tuple specifies the default argument values.
The optional closure tuple supplies the bindings for free variables.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__flipIndent___code__ = R"doc_from_python(code(argcount, kwonlyargcount, nlocals, stacksize, flags, codestring,
      constants, names, varnames, filename, name, firstlineno,
      lnotab[, freevars[, cellvars]])

Create a code object.  Not for the faint of heart.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__flipIndent___delattr__ = R"doc_from_python(Implement delattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__flipIndent___dir__ = R"doc_from_python(__dir__() -> list
default dir() implementation
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__flipIndent___eq__ = R"doc_from_python(Return self==value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__flipIndent___format__ = R"doc_from_python(default object formatter
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__flipIndent___ge__ = R"doc_from_python(Return self>=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__flipIndent___get__ = R"doc_from_python(Return an attribute of instance, which is of type owner.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__flipIndent___getattribute__ = R"doc_from_python(Return getattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__flipIndent___gt__ = R"doc_from_python(Return self>value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__flipIndent___hash__ = R"doc_from_python(Return hash(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__flipIndent___init__ = R"doc_from_python(Initialize self.  See help(type(self)) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__flipIndent___init_subclass__ = R"doc_from_python(This method is called when a class is subclassed.

The default implementation does nothing. It may be
overridden to extend subclasses.

)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__flipIndent___le__ = R"doc_from_python(Return self<=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__flipIndent___lt__ = R"doc_from_python(Return self<value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__flipIndent___ne__ = R"doc_from_python(Return self!=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__flipIndent___new__ = R"doc_from_python(Create and return a new object.  See help(type) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__flipIndent___reduce__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__flipIndent___reduce_ex__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__flipIndent___repr__ = R"doc_from_python(Return repr(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__flipIndent___setattr__ = R"doc_from_python(Implement setattr(self, name, value).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__flipIndent___sizeof__ = R"doc_from_python(__sizeof__() -> int
size of object in memory, in bytes
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__flipIndent___str__ = R"doc_from_python(Return str(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__flipIndent___subclasshook__ = R"doc_from_python(Abstract classes can override this to customize issubclass().

This is invoked early on by abc.ABCMeta.__subclasscheck__().
It should return True, False or NotImplemented.  If it returns
NotImplemented, the normal algorithm is used.  Otherwise, it
overrides the normal algorithm (and the outcome is cached).

)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__indent = R"doc_from_python(Write out the indent string.

        :param offset: The offset.

        :returns: ``NoneType``
        
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__indent___call__ = R"doc_from_python(Call self as a function.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__indent___class__ = R"doc_from_python(function(code, globals[, name[, argdefs[, closure]]])

Create a function object from a code object and a dictionary.
The optional name string overrides the name from the code object.
The optional argdefs tuple specifies the default argument values.
The optional closure tuple supplies the bindings for free variables.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__indent___code__ = R"doc_from_python(code(argcount, kwonlyargcount, nlocals, stacksize, flags, codestring,
      constants, names, varnames, filename, name, firstlineno,
      lnotab[, freevars[, cellvars]])

Create a code object.  Not for the faint of heart.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__indent___delattr__ = R"doc_from_python(Implement delattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__indent___dir__ = R"doc_from_python(__dir__() -> list
default dir() implementation
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__indent___eq__ = R"doc_from_python(Return self==value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__indent___format__ = R"doc_from_python(default object formatter
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__indent___ge__ = R"doc_from_python(Return self>=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__indent___get__ = R"doc_from_python(Return an attribute of instance, which is of type owner.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__indent___getattribute__ = R"doc_from_python(Return getattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__indent___gt__ = R"doc_from_python(Return self>value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__indent___hash__ = R"doc_from_python(Return hash(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__indent___init__ = R"doc_from_python(Initialize self.  See help(type(self)) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__indent___init_subclass__ = R"doc_from_python(This method is called when a class is subclassed.

The default implementation does nothing. It may be
overridden to extend subclasses.

)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__indent___le__ = R"doc_from_python(Return self<=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__indent___lt__ = R"doc_from_python(Return self<value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__indent___ne__ = R"doc_from_python(Return self!=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__indent___new__ = R"doc_from_python(Create and return a new object.  See help(type) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__indent___reduce__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__indent___reduce_ex__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__indent___repr__ = R"doc_from_python(Return repr(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__indent___setattr__ = R"doc_from_python(Implement setattr(self, name, value).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__indent___sizeof__ = R"doc_from_python(__sizeof__() -> int
size of object in memory, in bytes
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__indent___str__ = R"doc_from_python(Return str(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream__indent___subclasshook__ = R"doc_from_python(Abstract classes can override this to customize issubclass().

This is invoked early on by abc.ABCMeta.__subclasscheck__().
It should return True, False or NotImplemented.  If it returns
NotImplemented, the normal algorithm is used.  Otherwise, it
overrides the normal algorithm (and the outcome is cached).

)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_characters = R"doc_from_python(Encodes the string and writes it to the output.

        :param theString: The content.

        :returns: ``NoneType``
        
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_characters___call__ = R"doc_from_python(Call self as a function.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_characters___class__ = R"doc_from_python(function(code, globals[, name[, argdefs[, closure]]])

Create a function object from a code object and a dictionary.
The optional name string overrides the name from the code object.
The optional argdefs tuple specifies the default argument values.
The optional closure tuple supplies the bindings for free variables.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_characters___code__ = R"doc_from_python(code(argcount, kwonlyargcount, nlocals, stacksize, flags, codestring,
      constants, names, varnames, filename, name, firstlineno,
      lnotab[, freevars[, cellvars]])

Create a code object.  Not for the faint of heart.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_characters___delattr__ = R"doc_from_python(Implement delattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_characters___dir__ = R"doc_from_python(__dir__() -> list
default dir() implementation
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_characters___eq__ = R"doc_from_python(Return self==value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_characters___format__ = R"doc_from_python(default object formatter
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_characters___ge__ = R"doc_from_python(Return self>=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_characters___get__ = R"doc_from_python(Return an attribute of instance, which is of type owner.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_characters___getattribute__ = R"doc_from_python(Return getattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_characters___gt__ = R"doc_from_python(Return self>value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_characters___hash__ = R"doc_from_python(Return hash(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_characters___init__ = R"doc_from_python(Initialize self.  See help(type(self)) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_characters___init_subclass__ = R"doc_from_python(This method is called when a class is subclassed.

The default implementation does nothing. It may be
overridden to extend subclasses.

)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_characters___le__ = R"doc_from_python(Return self<=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_characters___lt__ = R"doc_from_python(Return self<value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_characters___ne__ = R"doc_from_python(Return self!=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_characters___new__ = R"doc_from_python(Create and return a new object.  See help(type) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_characters___reduce__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_characters___reduce_ex__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_characters___repr__ = R"doc_from_python(Return repr(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_characters___setattr__ = R"doc_from_python(Implement setattr(self, name, value).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_characters___sizeof__ = R"doc_from_python(__sizeof__() -> int
size of object in memory, in bytes
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_characters___str__ = R"doc_from_python(Return str(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_characters___subclasshook__ = R"doc_from_python(Abstract classes can override this to customize issubclass().

This is invoked early on by abc.ABCMeta.__subclasscheck__().
It should return True, False or NotImplemented.  If it returns
NotImplemented, the normal algorithm is used.  Otherwise, it
overrides the normal algorithm (and the outcome is cached).

)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_charactersWithBr = R"doc_from_python(Writes the string replacing any ``\n`` characters with ``<br/>`` elements.

        :param sIn: The string to write.

        :returns: ``NoneType``
        
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_charactersWithBr___call__ = R"doc_from_python(Call self as a function.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_charactersWithBr___class__ = R"doc_from_python(function(code, globals[, name[, argdefs[, closure]]])

Create a function object from a code object and a dictionary.
The optional name string overrides the name from the code object.
The optional argdefs tuple specifies the default argument values.
The optional closure tuple supplies the bindings for free variables.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_charactersWithBr___code__ = R"doc_from_python(code(argcount, kwonlyargcount, nlocals, stacksize, flags, codestring,
      constants, names, varnames, filename, name, firstlineno,
      lnotab[, freevars[, cellvars]])

Create a code object.  Not for the faint of heart.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_charactersWithBr___delattr__ = R"doc_from_python(Implement delattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_charactersWithBr___dir__ = R"doc_from_python(__dir__() -> list
default dir() implementation
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_charactersWithBr___eq__ = R"doc_from_python(Return self==value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_charactersWithBr___format__ = R"doc_from_python(default object formatter
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_charactersWithBr___ge__ = R"doc_from_python(Return self>=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_charactersWithBr___get__ = R"doc_from_python(Return an attribute of instance, which is of type owner.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_charactersWithBr___getattribute__ = R"doc_from_python(Return getattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_charactersWithBr___gt__ = R"doc_from_python(Return self>value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_charactersWithBr___hash__ = R"doc_from_python(Return hash(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_charactersWithBr___init__ = R"doc_from_python(Initialize self.  See help(type(self)) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_charactersWithBr___init_subclass__ = R"doc_from_python(This method is called when a class is subclassed.

The default implementation does nothing. It may be
overridden to extend subclasses.

)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_charactersWithBr___le__ = R"doc_from_python(Return self<=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_charactersWithBr___lt__ = R"doc_from_python(Return self<value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_charactersWithBr___ne__ = R"doc_from_python(Return self!=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_charactersWithBr___new__ = R"doc_from_python(Create and return a new object.  See help(type) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_charactersWithBr___reduce__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_charactersWithBr___reduce_ex__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_charactersWithBr___repr__ = R"doc_from_python(Return repr(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_charactersWithBr___setattr__ = R"doc_from_python(Implement setattr(self, name, value).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_charactersWithBr___sizeof__ = R"doc_from_python(__sizeof__() -> int
size of object in memory, in bytes
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_charactersWithBr___str__ = R"doc_from_python(Return str(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_charactersWithBr___subclasshook__ = R"doc_from_python(Abstract classes can override this to customize issubclass().

This is invoked early on by abc.ABCMeta.__subclasscheck__().
It should return True, False or NotImplemented.  If it returns
NotImplemented, the normal algorithm is used.  Otherwise, it
overrides the normal algorithm (and the outcome is cached).

)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_comment = R"doc_from_python(Writes a comment to the output stream.

        :param theS: The comment.

        :param newLine: If True the comment is written on a new line, if False it is written inline.

        :returns: ``NoneType``
        
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_comment___call__ = R"doc_from_python(Call self as a function.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_comment___class__ = R"doc_from_python(function(code, globals[, name[, argdefs[, closure]]])

Create a function object from a code object and a dictionary.
The optional name string overrides the name from the code object.
The optional argdefs tuple specifies the default argument values.
The optional closure tuple supplies the bindings for free variables.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_comment___code__ = R"doc_from_python(code(argcount, kwonlyargcount, nlocals, stacksize, flags, codestring,
      constants, names, varnames, filename, name, firstlineno,
      lnotab[, freevars[, cellvars]])

Create a code object.  Not for the faint of heart.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_comment___delattr__ = R"doc_from_python(Implement delattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_comment___dir__ = R"doc_from_python(__dir__() -> list
default dir() implementation
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_comment___eq__ = R"doc_from_python(Return self==value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_comment___format__ = R"doc_from_python(default object formatter
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_comment___ge__ = R"doc_from_python(Return self>=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_comment___get__ = R"doc_from_python(Return an attribute of instance, which is of type owner.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_comment___getattribute__ = R"doc_from_python(Return getattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_comment___gt__ = R"doc_from_python(Return self>value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_comment___hash__ = R"doc_from_python(Return hash(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_comment___init__ = R"doc_from_python(Initialize self.  See help(type(self)) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_comment___init_subclass__ = R"doc_from_python(This method is called when a class is subclassed.

The default implementation does nothing. It may be
overridden to extend subclasses.

)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_comment___le__ = R"doc_from_python(Return self<=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_comment___lt__ = R"doc_from_python(Return self<value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_comment___ne__ = R"doc_from_python(Return self!=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_comment___new__ = R"doc_from_python(Create and return a new object.  See help(type) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_comment___reduce__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_comment___reduce_ex__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_comment___repr__ = R"doc_from_python(Return repr(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_comment___setattr__ = R"doc_from_python(Implement setattr(self, name, value).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_comment___sizeof__ = R"doc_from_python(__sizeof__() -> int
size of object in memory, in bytes
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_comment___str__ = R"doc_from_python(Return str(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_comment___subclasshook__ = R"doc_from_python(Abstract classes can override this to customize issubclass().

This is invoked early on by abc.ABCMeta.__subclasscheck__().
It should return True, False or NotImplemented.  If it returns
NotImplemented, the normal algorithm is used.  Otherwise, it
overrides the normal algorithm (and the outcome is cached).

)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_endElement = R"doc_from_python(Ends an element.

        :param name: Element name.

        :returns: ``NoneType``
        
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_endElement___call__ = R"doc_from_python(Call self as a function.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_endElement___class__ = R"doc_from_python(function(code, globals[, name[, argdefs[, closure]]])

Create a function object from a code object and a dictionary.
The optional name string overrides the name from the code object.
The optional argdefs tuple specifies the default argument values.
The optional closure tuple supplies the bindings for free variables.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_endElement___code__ = R"doc_from_python(code(argcount, kwonlyargcount, nlocals, stacksize, flags, codestring,
      constants, names, varnames, filename, name, firstlineno,
      lnotab[, freevars[, cellvars]])

Create a code object.  Not for the faint of heart.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_endElement___delattr__ = R"doc_from_python(Implement delattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_endElement___dir__ = R"doc_from_python(__dir__() -> list
default dir() implementation
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_endElement___eq__ = R"doc_from_python(Return self==value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_endElement___format__ = R"doc_from_python(default object formatter
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_endElement___ge__ = R"doc_from_python(Return self>=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_endElement___get__ = R"doc_from_python(Return an attribute of instance, which is of type owner.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_endElement___getattribute__ = R"doc_from_python(Return getattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_endElement___gt__ = R"doc_from_python(Return self>value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_endElement___hash__ = R"doc_from_python(Return hash(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_endElement___init__ = R"doc_from_python(Initialize self.  See help(type(self)) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_endElement___init_subclass__ = R"doc_from_python(This method is called when a class is subclassed.

The default implementation does nothing. It may be
overridden to extend subclasses.

)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_endElement___le__ = R"doc_from_python(Return self<=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_endElement___lt__ = R"doc_from_python(Return self<value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_endElement___ne__ = R"doc_from_python(Return self!=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_endElement___new__ = R"doc_from_python(Create and return a new object.  See help(type) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_endElement___reduce__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_endElement___reduce_ex__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_endElement___repr__ = R"doc_from_python(Return repr(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_endElement___setattr__ = R"doc_from_python(Implement setattr(self, name, value).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_endElement___sizeof__ = R"doc_from_python(__sizeof__() -> int
size of object in memory, in bytes
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_endElement___str__ = R"doc_from_python(Return str(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_endElement___subclasshook__ = R"doc_from_python(Abstract classes can override this to customize issubclass().

This is invoked early on by abc.ABCMeta.__subclasscheck__().
It should return True, False or NotImplemented.  If it returns
NotImplemented, the normal algorithm is used.  Otherwise, it
overrides the normal algorithm (and the outcome is cached).

)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_getvalue = R"doc_from_python(Returns the XML document suitable for writing to a file.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_getvalue___call__ = R"doc_from_python(Call self as a function.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_getvalue___class__ = R"doc_from_python(function(code, globals[, name[, argdefs[, closure]]])

Create a function object from a code object and a dictionary.
The optional name string overrides the name from the code object.
The optional argdefs tuple specifies the default argument values.
The optional closure tuple supplies the bindings for free variables.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_getvalue___code__ = R"doc_from_python(code(argcount, kwonlyargcount, nlocals, stacksize, flags, codestring,
      constants, names, varnames, filename, name, firstlineno,
      lnotab[, freevars[, cellvars]])

Create a code object.  Not for the faint of heart.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_getvalue___delattr__ = R"doc_from_python(Implement delattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_getvalue___dir__ = R"doc_from_python(__dir__() -> list
default dir() implementation
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_getvalue___eq__ = R"doc_from_python(Return self==value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_getvalue___format__ = R"doc_from_python(default object formatter
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_getvalue___ge__ = R"doc_from_python(Return self>=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_getvalue___get__ = R"doc_from_python(Return an attribute of instance, which is of type owner.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_getvalue___getattribute__ = R"doc_from_python(Return getattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_getvalue___gt__ = R"doc_from_python(Return self>value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_getvalue___hash__ = R"doc_from_python(Return hash(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_getvalue___init__ = R"doc_from_python(Initialize self.  See help(type(self)) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_getvalue___init_subclass__ = R"doc_from_python(This method is called when a class is subclassed.

The default implementation does nothing. It may be
overridden to extend subclasses.

)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_getvalue___le__ = R"doc_from_python(Return self<=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_getvalue___lt__ = R"doc_from_python(Return self<value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_getvalue___ne__ = R"doc_from_python(Return self!=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_getvalue___new__ = R"doc_from_python(Create and return a new object.  See help(type) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_getvalue___reduce__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_getvalue___reduce_ex__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_getvalue___repr__ = R"doc_from_python(Return repr(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_getvalue___setattr__ = R"doc_from_python(Implement setattr(self, name, value).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_getvalue___sizeof__ = R"doc_from_python(__sizeof__() -> int
size of object in memory, in bytes
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_getvalue___str__ = R"doc_from_python(Return str(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_getvalue___subclasshook__ = R"doc_from_python(Abstract classes can override this to customize issubclass().

This is invoked early on by abc.ABCMeta.__subclasscheck__().
It should return True, False or NotImplemented.  If it returns
NotImplemented, the normal algorithm is used.  Otherwise, it
overrides the normal algorithm (and the outcome is cached).

)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_literal = R"doc_from_python(Writes theString to the output without encoding.

        :param theString: The content.

        :returns: ``NoneType``
        
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_literal___call__ = R"doc_from_python(Call self as a function.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_literal___class__ = R"doc_from_python(function(code, globals[, name[, argdefs[, closure]]])

Create a function object from a code object and a dictionary.
The optional name string overrides the name from the code object.
The optional argdefs tuple specifies the default argument values.
The optional closure tuple supplies the bindings for free variables.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_literal___code__ = R"doc_from_python(code(argcount, kwonlyargcount, nlocals, stacksize, flags, codestring,
      constants, names, varnames, filename, name, firstlineno,
      lnotab[, freevars[, cellvars]])

Create a code object.  Not for the faint of heart.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_literal___delattr__ = R"doc_from_python(Implement delattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_literal___dir__ = R"doc_from_python(__dir__() -> list
default dir() implementation
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_literal___eq__ = R"doc_from_python(Return self==value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_literal___format__ = R"doc_from_python(default object formatter
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_literal___ge__ = R"doc_from_python(Return self>=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_literal___get__ = R"doc_from_python(Return an attribute of instance, which is of type owner.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_literal___getattribute__ = R"doc_from_python(Return getattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_literal___gt__ = R"doc_from_python(Return self>value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_literal___hash__ = R"doc_from_python(Return hash(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_literal___init__ = R"doc_from_python(Initialize self.  See help(type(self)) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_literal___init_subclass__ = R"doc_from_python(This method is called when a class is subclassed.

The default implementation does nothing. It may be
overridden to extend subclasses.

)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_literal___le__ = R"doc_from_python(Return self<=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_literal___lt__ = R"doc_from_python(Return self<value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_literal___ne__ = R"doc_from_python(Return self!=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_literal___new__ = R"doc_from_python(Create and return a new object.  See help(type) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_literal___reduce__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_literal___reduce_ex__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_literal___repr__ = R"doc_from_python(Return repr(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_literal___setattr__ = R"doc_from_python(Implement setattr(self, name, value).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_literal___sizeof__ = R"doc_from_python(__sizeof__() -> int
size of object in memory, in bytes
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_literal___str__ = R"doc_from_python(Return str(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_literal___subclasshook__ = R"doc_from_python(Abstract classes can override this to customize issubclass().

This is invoked early on by abc.ABCMeta.__subclasscheck__().
It should return True, False or NotImplemented.  If it returns
NotImplemented, the normal algorithm is used.  Otherwise, it
overrides the normal algorithm (and the outcome is cached).

)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_pI = R"doc_from_python(Writes a Processing Instruction to the output stream.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_pI___call__ = R"doc_from_python(Call self as a function.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_pI___class__ = R"doc_from_python(function(code, globals[, name[, argdefs[, closure]]])

Create a function object from a code object and a dictionary.
The optional name string overrides the name from the code object.
The optional argdefs tuple specifies the default argument values.
The optional closure tuple supplies the bindings for free variables.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_pI___code__ = R"doc_from_python(code(argcount, kwonlyargcount, nlocals, stacksize, flags, codestring,
      constants, names, varnames, filename, name, firstlineno,
      lnotab[, freevars[, cellvars]])

Create a code object.  Not for the faint of heart.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_pI___delattr__ = R"doc_from_python(Implement delattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_pI___dir__ = R"doc_from_python(__dir__() -> list
default dir() implementation
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_pI___eq__ = R"doc_from_python(Return self==value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_pI___format__ = R"doc_from_python(default object formatter
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_pI___ge__ = R"doc_from_python(Return self>=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_pI___get__ = R"doc_from_python(Return an attribute of instance, which is of type owner.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_pI___getattribute__ = R"doc_from_python(Return getattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_pI___gt__ = R"doc_from_python(Return self>value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_pI___hash__ = R"doc_from_python(Return hash(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_pI___init__ = R"doc_from_python(Initialize self.  See help(type(self)) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_pI___init_subclass__ = R"doc_from_python(This method is called when a class is subclassed.

The default implementation does nothing. It may be
overridden to extend subclasses.

)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_pI___le__ = R"doc_from_python(Return self<=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_pI___lt__ = R"doc_from_python(Return self<value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_pI___ne__ = R"doc_from_python(Return self!=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_pI___new__ = R"doc_from_python(Create and return a new object.  See help(type) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_pI___reduce__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_pI___reduce_ex__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_pI___repr__ = R"doc_from_python(Return repr(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_pI___setattr__ = R"doc_from_python(Implement setattr(self, name, value).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_pI___sizeof__ = R"doc_from_python(__sizeof__() -> int
size of object in memory, in bytes
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_pI___str__ = R"doc_from_python(Return str(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_pI___subclasshook__ = R"doc_from_python(Abstract classes can override this to customize issubclass().

This is invoked early on by abc.ABCMeta.__subclasscheck__().
It should return True, False or NotImplemented.  If it returns
NotImplemented, the normal algorithm is used.  Otherwise, it
overrides the normal algorithm (and the outcome is cached).

)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_startElement = R"doc_from_python(Opens a named element with attributes.

        :param name: Element name.

        :param attrs: Element attributes.

        :returns: ``NoneType``
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_startElement___call__ = R"doc_from_python(Call self as a function.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_startElement___class__ = R"doc_from_python(function(code, globals[, name[, argdefs[, closure]]])

Create a function object from a code object and a dictionary.
The optional name string overrides the name from the code object.
The optional argdefs tuple specifies the default argument values.
The optional closure tuple supplies the bindings for free variables.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_startElement___code__ = R"doc_from_python(code(argcount, kwonlyargcount, nlocals, stacksize, flags, codestring,
      constants, names, varnames, filename, name, firstlineno,
      lnotab[, freevars[, cellvars]])

Create a code object.  Not for the faint of heart.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_startElement___delattr__ = R"doc_from_python(Implement delattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_startElement___dir__ = R"doc_from_python(__dir__() -> list
default dir() implementation
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_startElement___eq__ = R"doc_from_python(Return self==value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_startElement___format__ = R"doc_from_python(default object formatter
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_startElement___ge__ = R"doc_from_python(Return self>=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_startElement___get__ = R"doc_from_python(Return an attribute of instance, which is of type owner.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_startElement___getattribute__ = R"doc_from_python(Return getattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_startElement___gt__ = R"doc_from_python(Return self>value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_startElement___hash__ = R"doc_from_python(Return hash(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_startElement___init__ = R"doc_from_python(Initialize self.  See help(type(self)) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_startElement___init_subclass__ = R"doc_from_python(This method is called when a class is subclassed.

The default implementation does nothing. It may be
overridden to extend subclasses.

)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_startElement___le__ = R"doc_from_python(Return self<=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_startElement___lt__ = R"doc_from_python(Return self<value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_startElement___ne__ = R"doc_from_python(Return self!=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_startElement___new__ = R"doc_from_python(Create and return a new object.  See help(type) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_startElement___reduce__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_startElement___reduce_ex__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_startElement___repr__ = R"doc_from_python(Return repr(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_startElement___setattr__ = R"doc_from_python(Implement setattr(self, name, value).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_startElement___sizeof__ = R"doc_from_python(__sizeof__() -> int
size of object in memory, in bytes
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_startElement___str__ = R"doc_from_python(Return str(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_startElement___subclasshook__ = R"doc_from_python(Abstract classes can override this to customize issubclass().

This is invoked early on by abc.ABCMeta.__subclasscheck__().
It should return True, False or NotImplemented.  If it returns
NotImplemented, the normal algorithm is used.  Otherwise, it
overrides the normal algorithm (and the outcome is cached).

)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeCDATA = R"doc_from_python(Writes a CDATA section.
        
        Example:
        
        .. code-block:: html

            <![CDATA[
            ...
            ]]>

        :param theData: The CDATA content.

        :returns: ``NoneType``
        
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeCDATA___call__ = R"doc_from_python(Call self as a function.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeCDATA___class__ = R"doc_from_python(function(code, globals[, name[, argdefs[, closure]]])

Create a function object from a code object and a dictionary.
The optional name string overrides the name from the code object.
The optional argdefs tuple specifies the default argument values.
The optional closure tuple supplies the bindings for free variables.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeCDATA___code__ = R"doc_from_python(code(argcount, kwonlyargcount, nlocals, stacksize, flags, codestring,
      constants, names, varnames, filename, name, firstlineno,
      lnotab[, freevars[, cellvars]])

Create a code object.  Not for the faint of heart.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeCDATA___delattr__ = R"doc_from_python(Implement delattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeCDATA___dir__ = R"doc_from_python(__dir__() -> list
default dir() implementation
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeCDATA___eq__ = R"doc_from_python(Return self==value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeCDATA___format__ = R"doc_from_python(default object formatter
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeCDATA___ge__ = R"doc_from_python(Return self>=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeCDATA___get__ = R"doc_from_python(Return an attribute of instance, which is of type owner.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeCDATA___getattribute__ = R"doc_from_python(Return getattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeCDATA___gt__ = R"doc_from_python(Return self>value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeCDATA___hash__ = R"doc_from_python(Return hash(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeCDATA___init__ = R"doc_from_python(Initialize self.  See help(type(self)) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeCDATA___init_subclass__ = R"doc_from_python(This method is called when a class is subclassed.

The default implementation does nothing. It may be
overridden to extend subclasses.

)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeCDATA___le__ = R"doc_from_python(Return self<=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeCDATA___lt__ = R"doc_from_python(Return self<value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeCDATA___ne__ = R"doc_from_python(Return self!=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeCDATA___new__ = R"doc_from_python(Create and return a new object.  See help(type) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeCDATA___reduce__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeCDATA___reduce_ex__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeCDATA___repr__ = R"doc_from_python(Return repr(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeCDATA___setattr__ = R"doc_from_python(Implement setattr(self, name, value).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeCDATA___sizeof__ = R"doc_from_python(__sizeof__() -> int
size of object in memory, in bytes
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeCDATA___str__ = R"doc_from_python(Return str(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeCDATA___subclasshook__ = R"doc_from_python(Abstract classes can override this to customize issubclass().

This is invoked early on by abc.ABCMeta.__subclasscheck__().
It should return True, False or NotImplemented.  If it returns
NotImplemented, the normal algorithm is used.  Otherwise, it
overrides the normal algorithm (and the outcome is cached).

)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeCSS = R"doc_from_python(Writes a style sheet as a CDATA section. Expects a dict of dicts.
        
        Example:
        
        .. code-block:: html

            <style type="text/css"><![CDATA[
                ...
            ]]></style>

        :param theCSSMap: Map of CSS elements.

        :returns: ``NoneType``
        
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeCSS___call__ = R"doc_from_python(Call self as a function.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeCSS___class__ = R"doc_from_python(function(code, globals[, name[, argdefs[, closure]]])

Create a function object from a code object and a dictionary.
The optional name string overrides the name from the code object.
The optional argdefs tuple specifies the default argument values.
The optional closure tuple supplies the bindings for free variables.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeCSS___code__ = R"doc_from_python(code(argcount, kwonlyargcount, nlocals, stacksize, flags, codestring,
      constants, names, varnames, filename, name, firstlineno,
      lnotab[, freevars[, cellvars]])

Create a code object.  Not for the faint of heart.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeCSS___delattr__ = R"doc_from_python(Implement delattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeCSS___dir__ = R"doc_from_python(__dir__() -> list
default dir() implementation
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeCSS___eq__ = R"doc_from_python(Return self==value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeCSS___format__ = R"doc_from_python(default object formatter
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeCSS___ge__ = R"doc_from_python(Return self>=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeCSS___get__ = R"doc_from_python(Return an attribute of instance, which is of type owner.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeCSS___getattribute__ = R"doc_from_python(Return getattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeCSS___gt__ = R"doc_from_python(Return self>value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeCSS___hash__ = R"doc_from_python(Return hash(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeCSS___init__ = R"doc_from_python(Initialize self.  See help(type(self)) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeCSS___init_subclass__ = R"doc_from_python(This method is called when a class is subclassed.

The default implementation does nothing. It may be
overridden to extend subclasses.

)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeCSS___le__ = R"doc_from_python(Return self<=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeCSS___lt__ = R"doc_from_python(Return self<value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeCSS___ne__ = R"doc_from_python(Return self!=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeCSS___new__ = R"doc_from_python(Create and return a new object.  See help(type) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeCSS___reduce__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeCSS___reduce_ex__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeCSS___repr__ = R"doc_from_python(Return repr(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeCSS___setattr__ = R"doc_from_python(Implement setattr(self, name, value).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeCSS___sizeof__ = R"doc_from_python(__sizeof__() -> int
size of object in memory, in bytes
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeCSS___str__ = R"doc_from_python(Return str(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeCSS___subclasshook__ = R"doc_from_python(Abstract classes can override this to customize issubclass().

This is invoked early on by abc.ABCMeta.__subclasscheck__().
It should return True, False or NotImplemented.  If it returns
NotImplemented, the normal algorithm is used.  Otherwise, it
overrides the normal algorithm (and the outcome is cached).

)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeECMAScript = R"doc_from_python(Writes the ECMA script.
        
        Example:
        
        .. code-block:: html

            <script type="text/ecmascript">
            //<![CDATA[
            ...
            // ]]>
            </script>

        :param theData: The ECMA script content.

        :returns: ``NoneType``
        
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeECMAScript___call__ = R"doc_from_python(Call self as a function.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeECMAScript___class__ = R"doc_from_python(function(code, globals[, name[, argdefs[, closure]]])

Create a function object from a code object and a dictionary.
The optional name string overrides the name from the code object.
The optional argdefs tuple specifies the default argument values.
The optional closure tuple supplies the bindings for free variables.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeECMAScript___code__ = R"doc_from_python(code(argcount, kwonlyargcount, nlocals, stacksize, flags, codestring,
      constants, names, varnames, filename, name, firstlineno,
      lnotab[, freevars[, cellvars]])

Create a code object.  Not for the faint of heart.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeECMAScript___delattr__ = R"doc_from_python(Implement delattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeECMAScript___dir__ = R"doc_from_python(__dir__() -> list
default dir() implementation
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeECMAScript___eq__ = R"doc_from_python(Return self==value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeECMAScript___format__ = R"doc_from_python(default object formatter
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeECMAScript___ge__ = R"doc_from_python(Return self>=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeECMAScript___get__ = R"doc_from_python(Return an attribute of instance, which is of type owner.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeECMAScript___getattribute__ = R"doc_from_python(Return getattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeECMAScript___gt__ = R"doc_from_python(Return self>value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeECMAScript___hash__ = R"doc_from_python(Return hash(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeECMAScript___init__ = R"doc_from_python(Initialize self.  See help(type(self)) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeECMAScript___init_subclass__ = R"doc_from_python(This method is called when a class is subclassed.

The default implementation does nothing. It may be
overridden to extend subclasses.

)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeECMAScript___le__ = R"doc_from_python(Return self<=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeECMAScript___lt__ = R"doc_from_python(Return self<value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeECMAScript___ne__ = R"doc_from_python(Return self!=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeECMAScript___new__ = R"doc_from_python(Create and return a new object.  See help(type) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeECMAScript___reduce__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeECMAScript___reduce_ex__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeECMAScript___repr__ = R"doc_from_python(Return repr(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeECMAScript___setattr__ = R"doc_from_python(Implement setattr(self, name, value).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeECMAScript___sizeof__ = R"doc_from_python(__sizeof__() -> int
size of object in memory, in bytes
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeECMAScript___str__ = R"doc_from_python(Return str(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_writeECMAScript___subclasshook__ = R"doc_from_python(Abstract classes can override this to customize issubclass().

This is invoked early on by abc.ABCMeta.__subclasscheck__().
It should return True, False or NotImplemented.  If it returns
NotImplemented, the normal algorithm is used.  Otherwise, it
overrides the normal algorithm (and the outcome is cached).

)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_xmlSpacePreserve = R"doc_from_python(Suspends indentation for this element and its descendants.

        :returns: ``NoneType``
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_xmlSpacePreserve___call__ = R"doc_from_python(Call self as a function.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_xmlSpacePreserve___class__ = R"doc_from_python(function(code, globals[, name[, argdefs[, closure]]])

Create a function object from a code object and a dictionary.
The optional name string overrides the name from the code object.
The optional argdefs tuple specifies the default argument values.
The optional closure tuple supplies the bindings for free variables.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_xmlSpacePreserve___code__ = R"doc_from_python(code(argcount, kwonlyargcount, nlocals, stacksize, flags, codestring,
      constants, names, varnames, filename, name, firstlineno,
      lnotab[, freevars[, cellvars]])

Create a code object.  Not for the faint of heart.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_xmlSpacePreserve___delattr__ = R"doc_from_python(Implement delattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_xmlSpacePreserve___dir__ = R"doc_from_python(__dir__() -> list
default dir() implementation
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_xmlSpacePreserve___eq__ = R"doc_from_python(Return self==value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_xmlSpacePreserve___format__ = R"doc_from_python(default object formatter
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_xmlSpacePreserve___ge__ = R"doc_from_python(Return self>=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_xmlSpacePreserve___get__ = R"doc_from_python(Return an attribute of instance, which is of type owner.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_xmlSpacePreserve___getattribute__ = R"doc_from_python(Return getattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_xmlSpacePreserve___gt__ = R"doc_from_python(Return self>value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_xmlSpacePreserve___hash__ = R"doc_from_python(Return hash(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_xmlSpacePreserve___init__ = R"doc_from_python(Initialize self.  See help(type(self)) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_xmlSpacePreserve___init_subclass__ = R"doc_from_python(This method is called when a class is subclassed.

The default implementation does nothing. It may be
overridden to extend subclasses.

)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_xmlSpacePreserve___le__ = R"doc_from_python(Return self<=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_xmlSpacePreserve___lt__ = R"doc_from_python(Return self<value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_xmlSpacePreserve___ne__ = R"doc_from_python(Return self!=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_xmlSpacePreserve___new__ = R"doc_from_python(Create and return a new object.  See help(type) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_xmlSpacePreserve___reduce__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_xmlSpacePreserve___reduce_ex__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_xmlSpacePreserve___repr__ = R"doc_from_python(Return repr(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_xmlSpacePreserve___setattr__ = R"doc_from_python(Implement setattr(self, name, value).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_xmlSpacePreserve___sizeof__ = R"doc_from_python(__sizeof__() -> int
size of object in memory, in bytes
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_xmlSpacePreserve___str__ = R"doc_from_python(Return str(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XhtmlStream_xmlSpacePreserve___subclasshook__ = R"doc_from_python(Abstract classes can override this to customize issubclass().

This is invoked early on by abc.ABCMeta.__subclasscheck__().
It should return True, False or NotImplemented.  If it returns
NotImplemented, the normal algorithm is used.  Otherwise, it
overrides the normal algorithm (and the outcome is cached).

)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream = R"doc_from_python(Creates and maintains an XML output stream.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream___class__ = R"doc_from_python(type(object_or_name, bases, dict)
type(object) -> the object's type
type(name, bases, dict) -> a new type
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream___delattr__ = R"doc_from_python(Implement delattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream___dir__ = R"doc_from_python(__dir__() -> list
default dir() implementation
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream___enter__ = R"doc_from_python(Context manager support.

        :returns: ``cpip.plot.SVGWriter.SVGWriter,cpip.util.XmlWrite.XhtmlStream`` -- self
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream___eq__ = R"doc_from_python(Return self==value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream___exit__ = R"doc_from_python(Context manager support.

        :param excType: Exception type, if raised.

        :param excValue: Exception, if raised.

        :param tb: Traceback, if raised.

        :returns: ``NoneType``
        
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream___format__ = R"doc_from_python(default object formatter
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream___ge__ = R"doc_from_python(Return self>=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream___getattribute__ = R"doc_from_python(Return getattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream___gt__ = R"doc_from_python(Return self>value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream___hash__ = R"doc_from_python(Return hash(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream___init__ = R"doc_from_python(Initialise with an encoding.
        
        :param theEnc: The encoding to be used.

        :param theDtdLocal: Any local DTD as a string.

        :param theId: An integer value to use as an ID string.

        :param mustIndent: Flag, if True the elements will be indented (pretty printed).

        :returns: ``NoneType``
        
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream___init_subclass__ = R"doc_from_python(This method is called when a class is subclassed.

The default implementation does nothing. It may be
overridden to extend subclasses.

)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream___le__ = R"doc_from_python(Return self<=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream___lt__ = R"doc_from_python(Return self<value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream___ne__ = R"doc_from_python(Return self!=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream___new__ = R"doc_from_python(Create and return a new object.  See help(type) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream___reduce__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream___reduce_ex__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream___repr__ = R"doc_from_python(Return repr(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream___setattr__ = R"doc_from_python(Implement setattr(self, name, value).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream___sizeof__ = R"doc_from_python(__sizeof__() -> int
size of object in memory, in bytes
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream___str__ = R"doc_from_python(Return str(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream___subclasshook__ = R"doc_from_python(Abstract classes can override this to customize issubclass().

This is invoked early on by abc.ABCMeta.__subclasscheck__().
It should return True, False or NotImplemented.  If it returns
NotImplemented, the normal algorithm is used.  Otherwise, it
overrides the normal algorithm (and the outcome is cached).

)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream___weakref__ = R"doc_from_python(list of weak references to the object (if defined)
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__closeElemIfOpen = R"doc_from_python(Close the element if open.

        :returns: ``NoneType``
        
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__closeElemIfOpen___call__ = R"doc_from_python(Call self as a function.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__closeElemIfOpen___class__ = R"doc_from_python(function(code, globals[, name[, argdefs[, closure]]])

Create a function object from a code object and a dictionary.
The optional name string overrides the name from the code object.
The optional argdefs tuple specifies the default argument values.
The optional closure tuple supplies the bindings for free variables.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__closeElemIfOpen___code__ = R"doc_from_python(code(argcount, kwonlyargcount, nlocals, stacksize, flags, codestring,
      constants, names, varnames, filename, name, firstlineno,
      lnotab[, freevars[, cellvars]])

Create a code object.  Not for the faint of heart.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__closeElemIfOpen___delattr__ = R"doc_from_python(Implement delattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__closeElemIfOpen___dir__ = R"doc_from_python(__dir__() -> list
default dir() implementation
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__closeElemIfOpen___eq__ = R"doc_from_python(Return self==value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__closeElemIfOpen___format__ = R"doc_from_python(default object formatter
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__closeElemIfOpen___ge__ = R"doc_from_python(Return self>=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__closeElemIfOpen___get__ = R"doc_from_python(Return an attribute of instance, which is of type owner.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__closeElemIfOpen___getattribute__ = R"doc_from_python(Return getattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__closeElemIfOpen___gt__ = R"doc_from_python(Return self>value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__closeElemIfOpen___hash__ = R"doc_from_python(Return hash(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__closeElemIfOpen___init__ = R"doc_from_python(Initialize self.  See help(type(self)) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__closeElemIfOpen___init_subclass__ = R"doc_from_python(This method is called when a class is subclassed.

The default implementation does nothing. It may be
overridden to extend subclasses.

)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__closeElemIfOpen___le__ = R"doc_from_python(Return self<=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__closeElemIfOpen___lt__ = R"doc_from_python(Return self<value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__closeElemIfOpen___ne__ = R"doc_from_python(Return self!=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__closeElemIfOpen___new__ = R"doc_from_python(Create and return a new object.  See help(type) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__closeElemIfOpen___reduce__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__closeElemIfOpen___reduce_ex__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__closeElemIfOpen___repr__ = R"doc_from_python(Return repr(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__closeElemIfOpen___setattr__ = R"doc_from_python(Implement setattr(self, name, value).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__closeElemIfOpen___sizeof__ = R"doc_from_python(__sizeof__() -> int
size of object in memory, in bytes
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__closeElemIfOpen___str__ = R"doc_from_python(Return str(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__closeElemIfOpen___subclasshook__ = R"doc_from_python(Abstract classes can override this to customize issubclass().

This is invoked early on by abc.ABCMeta.__subclasscheck__().
It should return True, False or NotImplemented.  If it returns
NotImplemented, the normal algorithm is used.  Otherwise, it
overrides the normal algorithm (and the outcome is cached).

)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__encode = R"doc_from_python("Apply the XML encoding such as ``'<'`` to ``'&lt;'``

        :param theStr: String to encode.

        :returns: ``str`` -- Encoded string.
        
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__encode___call__ = R"doc_from_python(Call self as a function.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__encode___class__ = R"doc_from_python(function(code, globals[, name[, argdefs[, closure]]])

Create a function object from a code object and a dictionary.
The optional name string overrides the name from the code object.
The optional argdefs tuple specifies the default argument values.
The optional closure tuple supplies the bindings for free variables.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__encode___code__ = R"doc_from_python(code(argcount, kwonlyargcount, nlocals, stacksize, flags, codestring,
      constants, names, varnames, filename, name, firstlineno,
      lnotab[, freevars[, cellvars]])

Create a code object.  Not for the faint of heart.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__encode___delattr__ = R"doc_from_python(Implement delattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__encode___dir__ = R"doc_from_python(__dir__() -> list
default dir() implementation
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__encode___eq__ = R"doc_from_python(Return self==value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__encode___format__ = R"doc_from_python(default object formatter
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__encode___ge__ = R"doc_from_python(Return self>=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__encode___get__ = R"doc_from_python(Return an attribute of instance, which is of type owner.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__encode___getattribute__ = R"doc_from_python(Return getattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__encode___gt__ = R"doc_from_python(Return self>value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__encode___hash__ = R"doc_from_python(Return hash(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__encode___init__ = R"doc_from_python(Initialize self.  See help(type(self)) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__encode___init_subclass__ = R"doc_from_python(This method is called when a class is subclassed.

The default implementation does nothing. It may be
overridden to extend subclasses.

)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__encode___le__ = R"doc_from_python(Return self<=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__encode___lt__ = R"doc_from_python(Return self<value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__encode___ne__ = R"doc_from_python(Return self!=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__encode___new__ = R"doc_from_python(Create and return a new object.  See help(type) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__encode___reduce__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__encode___reduce_ex__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__encode___repr__ = R"doc_from_python(Return repr(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__encode___setattr__ = R"doc_from_python(Implement setattr(self, name, value).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__encode___sizeof__ = R"doc_from_python(__sizeof__() -> int
size of object in memory, in bytes
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__encode___str__ = R"doc_from_python(Return str(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__encode___subclasshook__ = R"doc_from_python(Abstract classes can override this to customize issubclass().

This is invoked early on by abc.ABCMeta.__subclasscheck__().
It should return True, False or NotImplemented.  If it returns
NotImplemented, the normal algorithm is used.  Otherwise, it
overrides the normal algorithm (and the outcome is cached).

)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__flipIndent = R"doc_from_python(Set the value at the tip of the indent stack to the given value.

        :param theBool: Flag for indenting.

        :returns: ``NoneType``
        
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__flipIndent___call__ = R"doc_from_python(Call self as a function.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__flipIndent___class__ = R"doc_from_python(function(code, globals[, name[, argdefs[, closure]]])

Create a function object from a code object and a dictionary.
The optional name string overrides the name from the code object.
The optional argdefs tuple specifies the default argument values.
The optional closure tuple supplies the bindings for free variables.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__flipIndent___code__ = R"doc_from_python(code(argcount, kwonlyargcount, nlocals, stacksize, flags, codestring,
      constants, names, varnames, filename, name, firstlineno,
      lnotab[, freevars[, cellvars]])

Create a code object.  Not for the faint of heart.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__flipIndent___delattr__ = R"doc_from_python(Implement delattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__flipIndent___dir__ = R"doc_from_python(__dir__() -> list
default dir() implementation
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__flipIndent___eq__ = R"doc_from_python(Return self==value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__flipIndent___format__ = R"doc_from_python(default object formatter
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__flipIndent___ge__ = R"doc_from_python(Return self>=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__flipIndent___get__ = R"doc_from_python(Return an attribute of instance, which is of type owner.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__flipIndent___getattribute__ = R"doc_from_python(Return getattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__flipIndent___gt__ = R"doc_from_python(Return self>value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__flipIndent___hash__ = R"doc_from_python(Return hash(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__flipIndent___init__ = R"doc_from_python(Initialize self.  See help(type(self)) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__flipIndent___init_subclass__ = R"doc_from_python(This method is called when a class is subclassed.

The default implementation does nothing. It may be
overridden to extend subclasses.

)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__flipIndent___le__ = R"doc_from_python(Return self<=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__flipIndent___lt__ = R"doc_from_python(Return self<value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__flipIndent___ne__ = R"doc_from_python(Return self!=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__flipIndent___new__ = R"doc_from_python(Create and return a new object.  See help(type) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__flipIndent___reduce__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__flipIndent___reduce_ex__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__flipIndent___repr__ = R"doc_from_python(Return repr(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__flipIndent___setattr__ = R"doc_from_python(Implement setattr(self, name, value).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__flipIndent___sizeof__ = R"doc_from_python(__sizeof__() -> int
size of object in memory, in bytes
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__flipIndent___str__ = R"doc_from_python(Return str(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__flipIndent___subclasshook__ = R"doc_from_python(Abstract classes can override this to customize issubclass().

This is invoked early on by abc.ABCMeta.__subclasscheck__().
It should return True, False or NotImplemented.  If it returns
NotImplemented, the normal algorithm is used.  Otherwise, it
overrides the normal algorithm (and the outcome is cached).

)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__indent = R"doc_from_python(Write out the indent string.

        :param offset: The offset.

        :returns: ``NoneType``
        
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__indent___call__ = R"doc_from_python(Call self as a function.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__indent___class__ = R"doc_from_python(function(code, globals[, name[, argdefs[, closure]]])

Create a function object from a code object and a dictionary.
The optional name string overrides the name from the code object.
The optional argdefs tuple specifies the default argument values.
The optional closure tuple supplies the bindings for free variables.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__indent___code__ = R"doc_from_python(code(argcount, kwonlyargcount, nlocals, stacksize, flags, codestring,
      constants, names, varnames, filename, name, firstlineno,
      lnotab[, freevars[, cellvars]])

Create a code object.  Not for the faint of heart.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__indent___delattr__ = R"doc_from_python(Implement delattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__indent___dir__ = R"doc_from_python(__dir__() -> list
default dir() implementation
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__indent___eq__ = R"doc_from_python(Return self==value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__indent___format__ = R"doc_from_python(default object formatter
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__indent___ge__ = R"doc_from_python(Return self>=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__indent___get__ = R"doc_from_python(Return an attribute of instance, which is of type owner.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__indent___getattribute__ = R"doc_from_python(Return getattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__indent___gt__ = R"doc_from_python(Return self>value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__indent___hash__ = R"doc_from_python(Return hash(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__indent___init__ = R"doc_from_python(Initialize self.  See help(type(self)) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__indent___init_subclass__ = R"doc_from_python(This method is called when a class is subclassed.

The default implementation does nothing. It may be
overridden to extend subclasses.

)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__indent___le__ = R"doc_from_python(Return self<=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__indent___lt__ = R"doc_from_python(Return self<value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__indent___ne__ = R"doc_from_python(Return self!=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__indent___new__ = R"doc_from_python(Create and return a new object.  See help(type) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__indent___reduce__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__indent___reduce_ex__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__indent___repr__ = R"doc_from_python(Return repr(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__indent___setattr__ = R"doc_from_python(Implement setattr(self, name, value).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__indent___sizeof__ = R"doc_from_python(__sizeof__() -> int
size of object in memory, in bytes
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__indent___str__ = R"doc_from_python(Return str(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream__indent___subclasshook__ = R"doc_from_python(Abstract classes can override this to customize issubclass().

This is invoked early on by abc.ABCMeta.__subclasscheck__().
It should return True, False or NotImplemented.  If it returns
NotImplemented, the normal algorithm is used.  Otherwise, it
overrides the normal algorithm (and the outcome is cached).

)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_characters = R"doc_from_python(Encodes the string and writes it to the output.

        :param theString: The content.

        :returns: ``NoneType``
        
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_characters___call__ = R"doc_from_python(Call self as a function.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_characters___class__ = R"doc_from_python(function(code, globals[, name[, argdefs[, closure]]])

Create a function object from a code object and a dictionary.
The optional name string overrides the name from the code object.
The optional argdefs tuple specifies the default argument values.
The optional closure tuple supplies the bindings for free variables.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_characters___code__ = R"doc_from_python(code(argcount, kwonlyargcount, nlocals, stacksize, flags, codestring,
      constants, names, varnames, filename, name, firstlineno,
      lnotab[, freevars[, cellvars]])

Create a code object.  Not for the faint of heart.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_characters___delattr__ = R"doc_from_python(Implement delattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_characters___dir__ = R"doc_from_python(__dir__() -> list
default dir() implementation
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_characters___eq__ = R"doc_from_python(Return self==value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_characters___format__ = R"doc_from_python(default object formatter
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_characters___ge__ = R"doc_from_python(Return self>=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_characters___get__ = R"doc_from_python(Return an attribute of instance, which is of type owner.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_characters___getattribute__ = R"doc_from_python(Return getattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_characters___gt__ = R"doc_from_python(Return self>value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_characters___hash__ = R"doc_from_python(Return hash(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_characters___init__ = R"doc_from_python(Initialize self.  See help(type(self)) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_characters___init_subclass__ = R"doc_from_python(This method is called when a class is subclassed.

The default implementation does nothing. It may be
overridden to extend subclasses.

)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_characters___le__ = R"doc_from_python(Return self<=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_characters___lt__ = R"doc_from_python(Return self<value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_characters___ne__ = R"doc_from_python(Return self!=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_characters___new__ = R"doc_from_python(Create and return a new object.  See help(type) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_characters___reduce__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_characters___reduce_ex__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_characters___repr__ = R"doc_from_python(Return repr(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_characters___setattr__ = R"doc_from_python(Implement setattr(self, name, value).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_characters___sizeof__ = R"doc_from_python(__sizeof__() -> int
size of object in memory, in bytes
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_characters___str__ = R"doc_from_python(Return str(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_characters___subclasshook__ = R"doc_from_python(Abstract classes can override this to customize issubclass().

This is invoked early on by abc.ABCMeta.__subclasscheck__().
It should return True, False or NotImplemented.  If it returns
NotImplemented, the normal algorithm is used.  Otherwise, it
overrides the normal algorithm (and the outcome is cached).

)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_comment = R"doc_from_python(Writes a comment to the output stream.

        :param theS: The comment.

        :param newLine: If True the comment is written on a new line, if False it is written inline.

        :returns: ``NoneType``
        
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_comment___call__ = R"doc_from_python(Call self as a function.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_comment___class__ = R"doc_from_python(function(code, globals[, name[, argdefs[, closure]]])

Create a function object from a code object and a dictionary.
The optional name string overrides the name from the code object.
The optional argdefs tuple specifies the default argument values.
The optional closure tuple supplies the bindings for free variables.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_comment___code__ = R"doc_from_python(code(argcount, kwonlyargcount, nlocals, stacksize, flags, codestring,
      constants, names, varnames, filename, name, firstlineno,
      lnotab[, freevars[, cellvars]])

Create a code object.  Not for the faint of heart.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_comment___delattr__ = R"doc_from_python(Implement delattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_comment___dir__ = R"doc_from_python(__dir__() -> list
default dir() implementation
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_comment___eq__ = R"doc_from_python(Return self==value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_comment___format__ = R"doc_from_python(default object formatter
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_comment___ge__ = R"doc_from_python(Return self>=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_comment___get__ = R"doc_from_python(Return an attribute of instance, which is of type owner.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_comment___getattribute__ = R"doc_from_python(Return getattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_comment___gt__ = R"doc_from_python(Return self>value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_comment___hash__ = R"doc_from_python(Return hash(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_comment___init__ = R"doc_from_python(Initialize self.  See help(type(self)) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_comment___init_subclass__ = R"doc_from_python(This method is called when a class is subclassed.

The default implementation does nothing. It may be
overridden to extend subclasses.

)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_comment___le__ = R"doc_from_python(Return self<=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_comment___lt__ = R"doc_from_python(Return self<value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_comment___ne__ = R"doc_from_python(Return self!=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_comment___new__ = R"doc_from_python(Create and return a new object.  See help(type) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_comment___reduce__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_comment___reduce_ex__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_comment___repr__ = R"doc_from_python(Return repr(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_comment___setattr__ = R"doc_from_python(Implement setattr(self, name, value).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_comment___sizeof__ = R"doc_from_python(__sizeof__() -> int
size of object in memory, in bytes
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_comment___str__ = R"doc_from_python(Return str(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_comment___subclasshook__ = R"doc_from_python(Abstract classes can override this to customize issubclass().

This is invoked early on by abc.ABCMeta.__subclasscheck__().
It should return True, False or NotImplemented.  If it returns
NotImplemented, the normal algorithm is used.  Otherwise, it
overrides the normal algorithm (and the outcome is cached).

)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_endElement = R"doc_from_python(Ends an element.

        :param name: Element name.

        :returns: ``NoneType``
        
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_endElement___call__ = R"doc_from_python(Call self as a function.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_endElement___class__ = R"doc_from_python(function(code, globals[, name[, argdefs[, closure]]])

Create a function object from a code object and a dictionary.
The optional name string overrides the name from the code object.
The optional argdefs tuple specifies the default argument values.
The optional closure tuple supplies the bindings for free variables.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_endElement___code__ = R"doc_from_python(code(argcount, kwonlyargcount, nlocals, stacksize, flags, codestring,
      constants, names, varnames, filename, name, firstlineno,
      lnotab[, freevars[, cellvars]])

Create a code object.  Not for the faint of heart.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_endElement___delattr__ = R"doc_from_python(Implement delattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_endElement___dir__ = R"doc_from_python(__dir__() -> list
default dir() implementation
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_endElement___eq__ = R"doc_from_python(Return self==value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_endElement___format__ = R"doc_from_python(default object formatter
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_endElement___ge__ = R"doc_from_python(Return self>=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_endElement___get__ = R"doc_from_python(Return an attribute of instance, which is of type owner.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_endElement___getattribute__ = R"doc_from_python(Return getattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_endElement___gt__ = R"doc_from_python(Return self>value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_endElement___hash__ = R"doc_from_python(Return hash(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_endElement___init__ = R"doc_from_python(Initialize self.  See help(type(self)) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_endElement___init_subclass__ = R"doc_from_python(This method is called when a class is subclassed.

The default implementation does nothing. It may be
overridden to extend subclasses.

)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_endElement___le__ = R"doc_from_python(Return self<=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_endElement___lt__ = R"doc_from_python(Return self<value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_endElement___ne__ = R"doc_from_python(Return self!=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_endElement___new__ = R"doc_from_python(Create and return a new object.  See help(type) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_endElement___reduce__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_endElement___reduce_ex__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_endElement___repr__ = R"doc_from_python(Return repr(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_endElement___setattr__ = R"doc_from_python(Implement setattr(self, name, value).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_endElement___sizeof__ = R"doc_from_python(__sizeof__() -> int
size of object in memory, in bytes
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_endElement___str__ = R"doc_from_python(Return str(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_endElement___subclasshook__ = R"doc_from_python(Abstract classes can override this to customize issubclass().

This is invoked early on by abc.ABCMeta.__subclasscheck__().
It should return True, False or NotImplemented.  If it returns
NotImplemented, the normal algorithm is used.  Otherwise, it
overrides the normal algorithm (and the outcome is cached).

)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_getvalue = R"doc_from_python(Returns the XML document suitable for writing to a file.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_getvalue___call__ = R"doc_from_python(Call self as a function.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_getvalue___class__ = R"doc_from_python(function(code, globals[, name[, argdefs[, closure]]])

Create a function object from a code object and a dictionary.
The optional name string overrides the name from the code object.
The optional argdefs tuple specifies the default argument values.
The optional closure tuple supplies the bindings for free variables.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_getvalue___code__ = R"doc_from_python(code(argcount, kwonlyargcount, nlocals, stacksize, flags, codestring,
      constants, names, varnames, filename, name, firstlineno,
      lnotab[, freevars[, cellvars]])

Create a code object.  Not for the faint of heart.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_getvalue___delattr__ = R"doc_from_python(Implement delattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_getvalue___dir__ = R"doc_from_python(__dir__() -> list
default dir() implementation
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_getvalue___eq__ = R"doc_from_python(Return self==value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_getvalue___format__ = R"doc_from_python(default object formatter
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_getvalue___ge__ = R"doc_from_python(Return self>=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_getvalue___get__ = R"doc_from_python(Return an attribute of instance, which is of type owner.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_getvalue___getattribute__ = R"doc_from_python(Return getattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_getvalue___gt__ = R"doc_from_python(Return self>value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_getvalue___hash__ = R"doc_from_python(Return hash(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_getvalue___init__ = R"doc_from_python(Initialize self.  See help(type(self)) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_getvalue___init_subclass__ = R"doc_from_python(This method is called when a class is subclassed.

The default implementation does nothing. It may be
overridden to extend subclasses.

)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_getvalue___le__ = R"doc_from_python(Return self<=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_getvalue___lt__ = R"doc_from_python(Return self<value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_getvalue___ne__ = R"doc_from_python(Return self!=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_getvalue___new__ = R"doc_from_python(Create and return a new object.  See help(type) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_getvalue___reduce__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_getvalue___reduce_ex__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_getvalue___repr__ = R"doc_from_python(Return repr(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_getvalue___setattr__ = R"doc_from_python(Implement setattr(self, name, value).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_getvalue___sizeof__ = R"doc_from_python(__sizeof__() -> int
size of object in memory, in bytes
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_getvalue___str__ = R"doc_from_python(Return str(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_getvalue___subclasshook__ = R"doc_from_python(Abstract classes can override this to customize issubclass().

This is invoked early on by abc.ABCMeta.__subclasscheck__().
It should return True, False or NotImplemented.  If it returns
NotImplemented, the normal algorithm is used.  Otherwise, it
overrides the normal algorithm (and the outcome is cached).

)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_literal = R"doc_from_python(Writes theString to the output without encoding.

        :param theString: The content.

        :returns: ``NoneType``
        
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_literal___call__ = R"doc_from_python(Call self as a function.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_literal___class__ = R"doc_from_python(function(code, globals[, name[, argdefs[, closure]]])

Create a function object from a code object and a dictionary.
The optional name string overrides the name from the code object.
The optional argdefs tuple specifies the default argument values.
The optional closure tuple supplies the bindings for free variables.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_literal___code__ = R"doc_from_python(code(argcount, kwonlyargcount, nlocals, stacksize, flags, codestring,
      constants, names, varnames, filename, name, firstlineno,
      lnotab[, freevars[, cellvars]])

Create a code object.  Not for the faint of heart.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_literal___delattr__ = R"doc_from_python(Implement delattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_literal___dir__ = R"doc_from_python(__dir__() -> list
default dir() implementation
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_literal___eq__ = R"doc_from_python(Return self==value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_literal___format__ = R"doc_from_python(default object formatter
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_literal___ge__ = R"doc_from_python(Return self>=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_literal___get__ = R"doc_from_python(Return an attribute of instance, which is of type owner.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_literal___getattribute__ = R"doc_from_python(Return getattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_literal___gt__ = R"doc_from_python(Return self>value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_literal___hash__ = R"doc_from_python(Return hash(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_literal___init__ = R"doc_from_python(Initialize self.  See help(type(self)) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_literal___init_subclass__ = R"doc_from_python(This method is called when a class is subclassed.

The default implementation does nothing. It may be
overridden to extend subclasses.

)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_literal___le__ = R"doc_from_python(Return self<=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_literal___lt__ = R"doc_from_python(Return self<value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_literal___ne__ = R"doc_from_python(Return self!=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_literal___new__ = R"doc_from_python(Create and return a new object.  See help(type) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_literal___reduce__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_literal___reduce_ex__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_literal___repr__ = R"doc_from_python(Return repr(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_literal___setattr__ = R"doc_from_python(Implement setattr(self, name, value).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_literal___sizeof__ = R"doc_from_python(__sizeof__() -> int
size of object in memory, in bytes
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_literal___str__ = R"doc_from_python(Return str(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_literal___subclasshook__ = R"doc_from_python(Abstract classes can override this to customize issubclass().

This is invoked early on by abc.ABCMeta.__subclasscheck__().
It should return True, False or NotImplemented.  If it returns
NotImplemented, the normal algorithm is used.  Otherwise, it
overrides the normal algorithm (and the outcome is cached).

)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_pI = R"doc_from_python(Writes a Processing Instruction to the output stream.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_pI___call__ = R"doc_from_python(Call self as a function.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_pI___class__ = R"doc_from_python(function(code, globals[, name[, argdefs[, closure]]])

Create a function object from a code object and a dictionary.
The optional name string overrides the name from the code object.
The optional argdefs tuple specifies the default argument values.
The optional closure tuple supplies the bindings for free variables.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_pI___code__ = R"doc_from_python(code(argcount, kwonlyargcount, nlocals, stacksize, flags, codestring,
      constants, names, varnames, filename, name, firstlineno,
      lnotab[, freevars[, cellvars]])

Create a code object.  Not for the faint of heart.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_pI___delattr__ = R"doc_from_python(Implement delattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_pI___dir__ = R"doc_from_python(__dir__() -> list
default dir() implementation
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_pI___eq__ = R"doc_from_python(Return self==value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_pI___format__ = R"doc_from_python(default object formatter
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_pI___ge__ = R"doc_from_python(Return self>=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_pI___get__ = R"doc_from_python(Return an attribute of instance, which is of type owner.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_pI___getattribute__ = R"doc_from_python(Return getattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_pI___gt__ = R"doc_from_python(Return self>value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_pI___hash__ = R"doc_from_python(Return hash(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_pI___init__ = R"doc_from_python(Initialize self.  See help(type(self)) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_pI___init_subclass__ = R"doc_from_python(This method is called when a class is subclassed.

The default implementation does nothing. It may be
overridden to extend subclasses.

)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_pI___le__ = R"doc_from_python(Return self<=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_pI___lt__ = R"doc_from_python(Return self<value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_pI___ne__ = R"doc_from_python(Return self!=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_pI___new__ = R"doc_from_python(Create and return a new object.  See help(type) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_pI___reduce__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_pI___reduce_ex__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_pI___repr__ = R"doc_from_python(Return repr(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_pI___setattr__ = R"doc_from_python(Implement setattr(self, name, value).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_pI___sizeof__ = R"doc_from_python(__sizeof__() -> int
size of object in memory, in bytes
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_pI___str__ = R"doc_from_python(Return str(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_pI___subclasshook__ = R"doc_from_python(Abstract classes can override this to customize issubclass().

This is invoked early on by abc.ABCMeta.__subclasscheck__().
It should return True, False or NotImplemented.  If it returns
NotImplemented, the normal algorithm is used.  Otherwise, it
overrides the normal algorithm (and the outcome is cached).

)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_startElement = R"doc_from_python(Opens a named element with attributes.

        :param name: Element name.

        :param attrs: Element attributes.

        :returns: ``NoneType``
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_startElement___call__ = R"doc_from_python(Call self as a function.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_startElement___class__ = R"doc_from_python(function(code, globals[, name[, argdefs[, closure]]])

Create a function object from a code object and a dictionary.
The optional name string overrides the name from the code object.
The optional argdefs tuple specifies the default argument values.
The optional closure tuple supplies the bindings for free variables.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_startElement___code__ = R"doc_from_python(code(argcount, kwonlyargcount, nlocals, stacksize, flags, codestring,
      constants, names, varnames, filename, name, firstlineno,
      lnotab[, freevars[, cellvars]])

Create a code object.  Not for the faint of heart.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_startElement___delattr__ = R"doc_from_python(Implement delattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_startElement___dir__ = R"doc_from_python(__dir__() -> list
default dir() implementation
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_startElement___eq__ = R"doc_from_python(Return self==value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_startElement___format__ = R"doc_from_python(default object formatter
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_startElement___ge__ = R"doc_from_python(Return self>=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_startElement___get__ = R"doc_from_python(Return an attribute of instance, which is of type owner.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_startElement___getattribute__ = R"doc_from_python(Return getattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_startElement___gt__ = R"doc_from_python(Return self>value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_startElement___hash__ = R"doc_from_python(Return hash(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_startElement___init__ = R"doc_from_python(Initialize self.  See help(type(self)) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_startElement___init_subclass__ = R"doc_from_python(This method is called when a class is subclassed.

The default implementation does nothing. It may be
overridden to extend subclasses.

)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_startElement___le__ = R"doc_from_python(Return self<=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_startElement___lt__ = R"doc_from_python(Return self<value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_startElement___ne__ = R"doc_from_python(Return self!=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_startElement___new__ = R"doc_from_python(Create and return a new object.  See help(type) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_startElement___reduce__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_startElement___reduce_ex__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_startElement___repr__ = R"doc_from_python(Return repr(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_startElement___setattr__ = R"doc_from_python(Implement setattr(self, name, value).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_startElement___sizeof__ = R"doc_from_python(__sizeof__() -> int
size of object in memory, in bytes
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_startElement___str__ = R"doc_from_python(Return str(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_startElement___subclasshook__ = R"doc_from_python(Abstract classes can override this to customize issubclass().

This is invoked early on by abc.ABCMeta.__subclasscheck__().
It should return True, False or NotImplemented.  If it returns
NotImplemented, the normal algorithm is used.  Otherwise, it
overrides the normal algorithm (and the outcome is cached).

)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeCDATA = R"doc_from_python(Writes a CDATA section.
        
        Example:
        
        .. code-block:: html

            <![CDATA[
            ...
            ]]>

        :param theData: The CDATA content.

        :returns: ``NoneType``
        
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeCDATA___call__ = R"doc_from_python(Call self as a function.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeCDATA___class__ = R"doc_from_python(function(code, globals[, name[, argdefs[, closure]]])

Create a function object from a code object and a dictionary.
The optional name string overrides the name from the code object.
The optional argdefs tuple specifies the default argument values.
The optional closure tuple supplies the bindings for free variables.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeCDATA___code__ = R"doc_from_python(code(argcount, kwonlyargcount, nlocals, stacksize, flags, codestring,
      constants, names, varnames, filename, name, firstlineno,
      lnotab[, freevars[, cellvars]])

Create a code object.  Not for the faint of heart.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeCDATA___delattr__ = R"doc_from_python(Implement delattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeCDATA___dir__ = R"doc_from_python(__dir__() -> list
default dir() implementation
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeCDATA___eq__ = R"doc_from_python(Return self==value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeCDATA___format__ = R"doc_from_python(default object formatter
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeCDATA___ge__ = R"doc_from_python(Return self>=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeCDATA___get__ = R"doc_from_python(Return an attribute of instance, which is of type owner.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeCDATA___getattribute__ = R"doc_from_python(Return getattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeCDATA___gt__ = R"doc_from_python(Return self>value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeCDATA___hash__ = R"doc_from_python(Return hash(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeCDATA___init__ = R"doc_from_python(Initialize self.  See help(type(self)) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeCDATA___init_subclass__ = R"doc_from_python(This method is called when a class is subclassed.

The default implementation does nothing. It may be
overridden to extend subclasses.

)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeCDATA___le__ = R"doc_from_python(Return self<=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeCDATA___lt__ = R"doc_from_python(Return self<value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeCDATA___ne__ = R"doc_from_python(Return self!=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeCDATA___new__ = R"doc_from_python(Create and return a new object.  See help(type) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeCDATA___reduce__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeCDATA___reduce_ex__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeCDATA___repr__ = R"doc_from_python(Return repr(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeCDATA___setattr__ = R"doc_from_python(Implement setattr(self, name, value).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeCDATA___sizeof__ = R"doc_from_python(__sizeof__() -> int
size of object in memory, in bytes
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeCDATA___str__ = R"doc_from_python(Return str(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeCDATA___subclasshook__ = R"doc_from_python(Abstract classes can override this to customize issubclass().

This is invoked early on by abc.ABCMeta.__subclasscheck__().
It should return True, False or NotImplemented.  If it returns
NotImplemented, the normal algorithm is used.  Otherwise, it
overrides the normal algorithm (and the outcome is cached).

)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeCSS = R"doc_from_python(Writes a style sheet as a CDATA section. Expects a dict of dicts.
        
        Example:
        
        .. code-block:: html

            <style type="text/css"><![CDATA[
                ...
            ]]></style>

        :param theCSSMap: Map of CSS elements.

        :returns: ``NoneType``
        
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeCSS___call__ = R"doc_from_python(Call self as a function.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeCSS___class__ = R"doc_from_python(function(code, globals[, name[, argdefs[, closure]]])

Create a function object from a code object and a dictionary.
The optional name string overrides the name from the code object.
The optional argdefs tuple specifies the default argument values.
The optional closure tuple supplies the bindings for free variables.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeCSS___code__ = R"doc_from_python(code(argcount, kwonlyargcount, nlocals, stacksize, flags, codestring,
      constants, names, varnames, filename, name, firstlineno,
      lnotab[, freevars[, cellvars]])

Create a code object.  Not for the faint of heart.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeCSS___delattr__ = R"doc_from_python(Implement delattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeCSS___dir__ = R"doc_from_python(__dir__() -> list
default dir() implementation
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeCSS___eq__ = R"doc_from_python(Return self==value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeCSS___format__ = R"doc_from_python(default object formatter
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeCSS___ge__ = R"doc_from_python(Return self>=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeCSS___get__ = R"doc_from_python(Return an attribute of instance, which is of type owner.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeCSS___getattribute__ = R"doc_from_python(Return getattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeCSS___gt__ = R"doc_from_python(Return self>value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeCSS___hash__ = R"doc_from_python(Return hash(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeCSS___init__ = R"doc_from_python(Initialize self.  See help(type(self)) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeCSS___init_subclass__ = R"doc_from_python(This method is called when a class is subclassed.

The default implementation does nothing. It may be
overridden to extend subclasses.

)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeCSS___le__ = R"doc_from_python(Return self<=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeCSS___lt__ = R"doc_from_python(Return self<value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeCSS___ne__ = R"doc_from_python(Return self!=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeCSS___new__ = R"doc_from_python(Create and return a new object.  See help(type) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeCSS___reduce__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeCSS___reduce_ex__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeCSS___repr__ = R"doc_from_python(Return repr(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeCSS___setattr__ = R"doc_from_python(Implement setattr(self, name, value).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeCSS___sizeof__ = R"doc_from_python(__sizeof__() -> int
size of object in memory, in bytes
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeCSS___str__ = R"doc_from_python(Return str(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeCSS___subclasshook__ = R"doc_from_python(Abstract classes can override this to customize issubclass().

This is invoked early on by abc.ABCMeta.__subclasscheck__().
It should return True, False or NotImplemented.  If it returns
NotImplemented, the normal algorithm is used.  Otherwise, it
overrides the normal algorithm (and the outcome is cached).

)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeECMAScript = R"doc_from_python(Writes the ECMA script.
        
        Example:
        
        .. code-block:: html

            <script type="text/ecmascript">
            //<![CDATA[
            ...
            // ]]>
            </script>

        :param theData: The ECMA script content.

        :returns: ``NoneType``
        
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeECMAScript___call__ = R"doc_from_python(Call self as a function.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeECMAScript___class__ = R"doc_from_python(function(code, globals[, name[, argdefs[, closure]]])

Create a function object from a code object and a dictionary.
The optional name string overrides the name from the code object.
The optional argdefs tuple specifies the default argument values.
The optional closure tuple supplies the bindings for free variables.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeECMAScript___code__ = R"doc_from_python(code(argcount, kwonlyargcount, nlocals, stacksize, flags, codestring,
      constants, names, varnames, filename, name, firstlineno,
      lnotab[, freevars[, cellvars]])

Create a code object.  Not for the faint of heart.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeECMAScript___delattr__ = R"doc_from_python(Implement delattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeECMAScript___dir__ = R"doc_from_python(__dir__() -> list
default dir() implementation
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeECMAScript___eq__ = R"doc_from_python(Return self==value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeECMAScript___format__ = R"doc_from_python(default object formatter
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeECMAScript___ge__ = R"doc_from_python(Return self>=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeECMAScript___get__ = R"doc_from_python(Return an attribute of instance, which is of type owner.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeECMAScript___getattribute__ = R"doc_from_python(Return getattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeECMAScript___gt__ = R"doc_from_python(Return self>value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeECMAScript___hash__ = R"doc_from_python(Return hash(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeECMAScript___init__ = R"doc_from_python(Initialize self.  See help(type(self)) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeECMAScript___init_subclass__ = R"doc_from_python(This method is called when a class is subclassed.

The default implementation does nothing. It may be
overridden to extend subclasses.

)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeECMAScript___le__ = R"doc_from_python(Return self<=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeECMAScript___lt__ = R"doc_from_python(Return self<value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeECMAScript___ne__ = R"doc_from_python(Return self!=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeECMAScript___new__ = R"doc_from_python(Create and return a new object.  See help(type) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeECMAScript___reduce__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeECMAScript___reduce_ex__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeECMAScript___repr__ = R"doc_from_python(Return repr(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeECMAScript___setattr__ = R"doc_from_python(Implement setattr(self, name, value).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeECMAScript___sizeof__ = R"doc_from_python(__sizeof__() -> int
size of object in memory, in bytes
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeECMAScript___str__ = R"doc_from_python(Return str(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_writeECMAScript___subclasshook__ = R"doc_from_python(Abstract classes can override this to customize issubclass().

This is invoked early on by abc.ABCMeta.__subclasscheck__().
It should return True, False or NotImplemented.  If it returns
NotImplemented, the normal algorithm is used.  Otherwise, it
overrides the normal algorithm (and the outcome is cached).

)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_xmlSpacePreserve = R"doc_from_python(Suspends indentation for this element and its descendants.

        :returns: ``NoneType``
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_xmlSpacePreserve___call__ = R"doc_from_python(Call self as a function.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_xmlSpacePreserve___class__ = R"doc_from_python(function(code, globals[, name[, argdefs[, closure]]])

Create a function object from a code object and a dictionary.
The optional name string overrides the name from the code object.
The optional argdefs tuple specifies the default argument values.
The optional closure tuple supplies the bindings for free variables.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_xmlSpacePreserve___code__ = R"doc_from_python(code(argcount, kwonlyargcount, nlocals, stacksize, flags, codestring,
      constants, names, varnames, filename, name, firstlineno,
      lnotab[, freevars[, cellvars]])

Create a code object.  Not for the faint of heart.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_xmlSpacePreserve___delattr__ = R"doc_from_python(Implement delattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_xmlSpacePreserve___dir__ = R"doc_from_python(__dir__() -> list
default dir() implementation
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_xmlSpacePreserve___eq__ = R"doc_from_python(Return self==value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_xmlSpacePreserve___format__ = R"doc_from_python(default object formatter
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_xmlSpacePreserve___ge__ = R"doc_from_python(Return self>=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_xmlSpacePreserve___get__ = R"doc_from_python(Return an attribute of instance, which is of type owner.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_xmlSpacePreserve___getattribute__ = R"doc_from_python(Return getattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_xmlSpacePreserve___gt__ = R"doc_from_python(Return self>value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_xmlSpacePreserve___hash__ = R"doc_from_python(Return hash(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_xmlSpacePreserve___init__ = R"doc_from_python(Initialize self.  See help(type(self)) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_xmlSpacePreserve___init_subclass__ = R"doc_from_python(This method is called when a class is subclassed.

The default implementation does nothing. It may be
overridden to extend subclasses.

)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_xmlSpacePreserve___le__ = R"doc_from_python(Return self<=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_xmlSpacePreserve___lt__ = R"doc_from_python(Return self<value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_xmlSpacePreserve___ne__ = R"doc_from_python(Return self!=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_xmlSpacePreserve___new__ = R"doc_from_python(Create and return a new object.  See help(type) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_xmlSpacePreserve___reduce__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_xmlSpacePreserve___reduce_ex__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_xmlSpacePreserve___repr__ = R"doc_from_python(Return repr(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_xmlSpacePreserve___setattr__ = R"doc_from_python(Implement setattr(self, name, value).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_xmlSpacePreserve___sizeof__ = R"doc_from_python(__sizeof__() -> int
size of object in memory, in bytes
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_xmlSpacePreserve___str__ = R"doc_from_python(Return str(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_XmlStream_xmlSpacePreserve___subclasshook__ = R"doc_from_python(Abstract classes can override this to customize issubclass().

This is invoked early on by abc.ABCMeta.__subclasscheck__().
It should return True, False or NotImplemented.  If it returns
NotImplemented, the normal algorithm is used.  Otherwise, it
overrides the normal algorithm (and the outcome is cached).

)doc_from_python";

const char *DOCSTRING_XmlWrite___loader__ = R"doc_from_python(Concrete implementation of SourceLoader using the file system.
)doc_from_python";

const char *DOCSTRING_XmlWrite___spec__ = R"doc_from_python(The specification for a module, used for loading.

    A module's spec is the source for information about the module.  For
    data associated with the module, including source, use the spec's
    loader.

    `name` is the absolute name of the module.  `loader` is the loader
    to use when loading the module.  `parent` is the name of the
    package the module is in.  The parent is derived from the name.

    `is_package` determines if the module is considered a package or
    not.  On modules this is reflected by the `__path__` attribute.

    `origin` is the specific location used by the loader from which to
    load the module, if that information is available.  When filename is
    set, origin will match.

    `has_location` indicates that a spec's "origin" reflects a location.
    When this is True, `__file__` attribute of the module is set.

    `cached` is the location of the cached bytecode file, if any.  It
    corresponds to the `__cached__` attribute.

    `submodule_search_locations` is the sequence of path entries to
    search when importing submodules.  If set, is_package should be
    True--and False otherwise.

    Packages are simply modules that (may) have submodules.  If a spec
    has a non-None value in `submodule_search_locations`, the import
    system will consider modules loaded from the spec as packages.

    Only finders (see importlib.abc.MetaPathFinder and
    importlib.abc.PathEntryFinder) should modify ModuleSpec instances.

    
)doc_from_python";

const char *DOCSTRING_XmlWrite_decodeString = R"doc_from_python(Returns a string that is the argument decoded. May raise a TypeError.
)doc_from_python";

const char *DOCSTRING_XmlWrite_decodeString___call__ = R"doc_from_python(Call self as a function.
)doc_from_python";

const char *DOCSTRING_XmlWrite_decodeString___class__ = R"doc_from_python(function(code, globals[, name[, argdefs[, closure]]])

Create a function object from a code object and a dictionary.
The optional name string overrides the name from the code object.
The optional argdefs tuple specifies the default argument values.
The optional closure tuple supplies the bindings for free variables.
)doc_from_python";

const char *DOCSTRING_XmlWrite_decodeString___code__ = R"doc_from_python(code(argcount, kwonlyargcount, nlocals, stacksize, flags, codestring,
      constants, names, varnames, filename, name, firstlineno,
      lnotab[, freevars[, cellvars]])

Create a code object.  Not for the faint of heart.
)doc_from_python";

const char *DOCSTRING_XmlWrite_decodeString___delattr__ = R"doc_from_python(Implement delattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_decodeString___dir__ = R"doc_from_python(__dir__() -> list
default dir() implementation
)doc_from_python";

const char *DOCSTRING_XmlWrite_decodeString___eq__ = R"doc_from_python(Return self==value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_decodeString___format__ = R"doc_from_python(default object formatter
)doc_from_python";

const char *DOCSTRING_XmlWrite_decodeString___ge__ = R"doc_from_python(Return self>=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_decodeString___get__ = R"doc_from_python(Return an attribute of instance, which is of type owner.
)doc_from_python";

const char *DOCSTRING_XmlWrite_decodeString___getattribute__ = R"doc_from_python(Return getattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_decodeString___gt__ = R"doc_from_python(Return self>value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_decodeString___hash__ = R"doc_from_python(Return hash(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_decodeString___init__ = R"doc_from_python(Initialize self.  See help(type(self)) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_decodeString___init_subclass__ = R"doc_from_python(This method is called when a class is subclassed.

The default implementation does nothing. It may be
overridden to extend subclasses.

)doc_from_python";

const char *DOCSTRING_XmlWrite_decodeString___le__ = R"doc_from_python(Return self<=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_decodeString___lt__ = R"doc_from_python(Return self<value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_decodeString___ne__ = R"doc_from_python(Return self!=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_decodeString___new__ = R"doc_from_python(Create and return a new object.  See help(type) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_decodeString___reduce__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_decodeString___reduce_ex__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_decodeString___repr__ = R"doc_from_python(Return repr(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_decodeString___setattr__ = R"doc_from_python(Implement setattr(self, name, value).
)doc_from_python";

const char *DOCSTRING_XmlWrite_decodeString___sizeof__ = R"doc_from_python(__sizeof__() -> int
size of object in memory, in bytes
)doc_from_python";

const char *DOCSTRING_XmlWrite_decodeString___str__ = R"doc_from_python(Return str(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_decodeString___subclasshook__ = R"doc_from_python(Abstract classes can override this to customize issubclass().

This is invoked early on by abc.ABCMeta.__subclasscheck__().
It should return True, False or NotImplemented.  If it returns
NotImplemented, the normal algorithm is used.  Otherwise, it
overrides the normal algorithm (and the outcome is cached).

)doc_from_python";

const char *DOCSTRING_XmlWrite_encodeString = R"doc_from_python(Returns a string that is the argument encoded.

    From RFC3548:
    
    .. code-block:: text

                           Table 1: The Base 64 Alphabet
        Value Encoding  Value Encoding  Value Encoding  Value Encoding
            0 A            17 R            34 i            51 z
            1 B            18 S            35 j            52 0
            2 C            19 T            36 k            53 1
            3 D            20 U            37 l            54 2
            4 E            21 V            38 m            55 3
            5 F            22 W            39 n            56 4
            6 G            23 X            40 o            57 5
            7 H            24 Y            41 p            58 6
            8 I            25 Z            42 q            59 7
            9 J            26 a            43 r            60 8
           10 K            27 b            44 s            61 9
           11 L            28 c            45 t            62 +
           12 M            29 d            46 u            63 /
           13 N            30 e            47 v
           14 O            31 f            48 w         (pad) =
           15 P            32 g            49 x
           16 Q            33 h            50 y

    See section 3 of : http://www.faqs.org/rfcs/rfc3548.html

    :param theS: The string to be encoded.

    :param theCharPrefix: A character to prefix the string.

    :returns: ``str`` -- Encoded string.
    
)doc_from_python";

const char *DOCSTRING_XmlWrite_encodeString___call__ = R"doc_from_python(Call self as a function.
)doc_from_python";

const char *DOCSTRING_XmlWrite_encodeString___class__ = R"doc_from_python(function(code, globals[, name[, argdefs[, closure]]])

Create a function object from a code object and a dictionary.
The optional name string overrides the name from the code object.
The optional argdefs tuple specifies the default argument values.
The optional closure tuple supplies the bindings for free variables.
)doc_from_python";

const char *DOCSTRING_XmlWrite_encodeString___code__ = R"doc_from_python(code(argcount, kwonlyargcount, nlocals, stacksize, flags, codestring,
      constants, names, varnames, filename, name, firstlineno,
      lnotab[, freevars[, cellvars]])

Create a code object.  Not for the faint of heart.
)doc_from_python";

const char *DOCSTRING_XmlWrite_encodeString___delattr__ = R"doc_from_python(Implement delattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_encodeString___dir__ = R"doc_from_python(__dir__() -> list
default dir() implementation
)doc_from_python";

const char *DOCSTRING_XmlWrite_encodeString___eq__ = R"doc_from_python(Return self==value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_encodeString___format__ = R"doc_from_python(default object formatter
)doc_from_python";

const char *DOCSTRING_XmlWrite_encodeString___ge__ = R"doc_from_python(Return self>=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_encodeString___get__ = R"doc_from_python(Return an attribute of instance, which is of type owner.
)doc_from_python";

const char *DOCSTRING_XmlWrite_encodeString___getattribute__ = R"doc_from_python(Return getattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_encodeString___gt__ = R"doc_from_python(Return self>value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_encodeString___hash__ = R"doc_from_python(Return hash(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_encodeString___init__ = R"doc_from_python(Initialize self.  See help(type(self)) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_encodeString___init_subclass__ = R"doc_from_python(This method is called when a class is subclassed.

The default implementation does nothing. It may be
overridden to extend subclasses.

)doc_from_python";

const char *DOCSTRING_XmlWrite_encodeString___le__ = R"doc_from_python(Return self<=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_encodeString___lt__ = R"doc_from_python(Return self<value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_encodeString___ne__ = R"doc_from_python(Return self!=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_encodeString___new__ = R"doc_from_python(Create and return a new object.  See help(type) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_encodeString___reduce__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_encodeString___reduce_ex__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_encodeString___repr__ = R"doc_from_python(Return repr(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_encodeString___setattr__ = R"doc_from_python(Implement setattr(self, name, value).
)doc_from_python";

const char *DOCSTRING_XmlWrite_encodeString___sizeof__ = R"doc_from_python(__sizeof__() -> int
size of object in memory, in bytes
)doc_from_python";

const char *DOCSTRING_XmlWrite_encodeString___str__ = R"doc_from_python(Return str(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_encodeString___subclasshook__ = R"doc_from_python(Abstract classes can override this to customize issubclass().

This is invoked early on by abc.ABCMeta.__subclasscheck__().
It should return True, False or NotImplemented.  If it returns
NotImplemented, the normal algorithm is used.  Otherwise, it
overrides the normal algorithm (and the outcome is cached).

)doc_from_python";

const char *DOCSTRING_XmlWrite_nameFromString = R"doc_from_python(Returns a name from a string.
    
    See http://www.w3.org/TR/1999/REC-html401-19991224/types.html#type-cdata
    
    "ID and NAME tokens must begin with a letter ([A-Za-z]) and may be
    followed by any number of letters, digits ([0-9]), hyphens ("-"),
    underscores ("_"), colons (":"), and periods (".").
    
    This also works for in namespaces as ':' is not used in the encoding.

    :param theStr: The string to be encoded.

    :returns: ``str`` -- Encoded string.
)doc_from_python";

const char *DOCSTRING_XmlWrite_nameFromString___call__ = R"doc_from_python(Call self as a function.
)doc_from_python";

const char *DOCSTRING_XmlWrite_nameFromString___class__ = R"doc_from_python(function(code, globals[, name[, argdefs[, closure]]])

Create a function object from a code object and a dictionary.
The optional name string overrides the name from the code object.
The optional argdefs tuple specifies the default argument values.
The optional closure tuple supplies the bindings for free variables.
)doc_from_python";

const char *DOCSTRING_XmlWrite_nameFromString___code__ = R"doc_from_python(code(argcount, kwonlyargcount, nlocals, stacksize, flags, codestring,
      constants, names, varnames, filename, name, firstlineno,
      lnotab[, freevars[, cellvars]])

Create a code object.  Not for the faint of heart.
)doc_from_python";

const char *DOCSTRING_XmlWrite_nameFromString___delattr__ = R"doc_from_python(Implement delattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_nameFromString___dir__ = R"doc_from_python(__dir__() -> list
default dir() implementation
)doc_from_python";

const char *DOCSTRING_XmlWrite_nameFromString___eq__ = R"doc_from_python(Return self==value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_nameFromString___format__ = R"doc_from_python(default object formatter
)doc_from_python";

const char *DOCSTRING_XmlWrite_nameFromString___ge__ = R"doc_from_python(Return self>=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_nameFromString___get__ = R"doc_from_python(Return an attribute of instance, which is of type owner.
)doc_from_python";

const char *DOCSTRING_XmlWrite_nameFromString___getattribute__ = R"doc_from_python(Return getattr(self, name).
)doc_from_python";

const char *DOCSTRING_XmlWrite_nameFromString___gt__ = R"doc_from_python(Return self>value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_nameFromString___hash__ = R"doc_from_python(Return hash(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_nameFromString___init__ = R"doc_from_python(Initialize self.  See help(type(self)) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_nameFromString___init_subclass__ = R"doc_from_python(This method is called when a class is subclassed.

The default implementation does nothing. It may be
overridden to extend subclasses.

)doc_from_python";

const char *DOCSTRING_XmlWrite_nameFromString___le__ = R"doc_from_python(Return self<=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_nameFromString___lt__ = R"doc_from_python(Return self<value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_nameFromString___ne__ = R"doc_from_python(Return self!=value.
)doc_from_python";

const char *DOCSTRING_XmlWrite_nameFromString___new__ = R"doc_from_python(Create and return a new object.  See help(type) for accurate signature.
)doc_from_python";

const char *DOCSTRING_XmlWrite_nameFromString___reduce__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_nameFromString___reduce_ex__ = R"doc_from_python(helper for pickle
)doc_from_python";

const char *DOCSTRING_XmlWrite_nameFromString___repr__ = R"doc_from_python(Return repr(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_nameFromString___setattr__ = R"doc_from_python(Implement setattr(self, name, value).
)doc_from_python";

const char *DOCSTRING_XmlWrite_nameFromString___sizeof__ = R"doc_from_python(__sizeof__() -> int
size of object in memory, in bytes
)doc_from_python";

const char *DOCSTRING_XmlWrite_nameFromString___str__ = R"doc_from_python(Return str(self).
)doc_from_python";

const char *DOCSTRING_XmlWrite_nameFromString___subclasshook__ = R"doc_from_python(Abstract classes can override this to customize issubclass().

This is invoked early on by abc.ABCMeta.__subclasscheck__().
It should return True, False or NotImplemented.  If it returns
NotImplemented, the normal algorithm is used.  Otherwise, it
overrides the normal algorithm (and the outcome is cached).

)doc_from_python";


// Completed 1065 documentation strings from module XmlWrite
